#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Arya.Framework.Data.AryaDb
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Test_MSC")]
	public partial class AryaDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertDerivedAttribute(DerivedAttribute instance);
    partial void UpdateDerivedAttribute(DerivedAttribute instance);
    partial void DeleteDerivedAttribute(DerivedAttribute instance);
    partial void InsertDerivedTaxonomy(DerivedTaxonomy instance);
    partial void UpdateDerivedTaxonomy(DerivedTaxonomy instance);
    partial void DeleteDerivedTaxonomy(DerivedTaxonomy instance);
    partial void InsertEntityInfo(EntityInfo instance);
    partial void UpdateEntityInfo(EntityInfo instance);
    partial void DeleteEntityInfo(EntityInfo instance);
    partial void InsertProjectUom(ProjectUom instance);
    partial void UpdateProjectUom(ProjectUom instance);
    partial void DeleteProjectUom(ProjectUom instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertSchemaData(SchemaData instance);
    partial void UpdateSchemaData(SchemaData instance);
    partial void DeleteSchemaData(SchemaData instance);
    partial void InsertSchemaInfo(SchemaInfo instance);
    partial void UpdateSchemaInfo(SchemaInfo instance);
    partial void DeleteSchemaInfo(SchemaInfo instance);
    partial void InsertSchemaMetaData(SchemaMetaData instance);
    partial void UpdateSchemaMetaData(SchemaMetaData instance);
    partial void DeleteSchemaMetaData(SchemaMetaData instance);
    partial void InsertSkuInfo(SkuInfo instance);
    partial void UpdateSkuInfo(SkuInfo instance);
    partial void DeleteSkuInfo(SkuInfo instance);
    partial void InsertSkuLink(SkuLink instance);
    partial void UpdateSkuLink(SkuLink instance);
    partial void DeleteSkuLink(SkuLink instance);
    partial void InsertTaxonomyInfo(TaxonomyInfo instance);
    partial void UpdateTaxonomyInfo(TaxonomyInfo instance);
    partial void DeleteTaxonomyInfo(TaxonomyInfo instance);
    partial void InsertUIObject(UIObject instance);
    partial void UpdateUIObject(UIObject instance);
    partial void DeleteUIObject(UIObject instance);
    partial void InsertCheckpoint(Checkpoint instance);
    partial void UpdateCheckpoint(Checkpoint instance);
    partial void DeleteCheckpoint(Checkpoint instance);
    partial void InsertSkuGroup(SkuGroup instance);
    partial void UpdateSkuGroup(SkuGroup instance);
    partial void DeleteSkuGroup(SkuGroup instance);
    partial void InsertGroupNote(GroupNote instance);
    partial void UpdateGroupNote(GroupNote instance);
    partial void DeleteGroupNote(GroupNote instance);
    partial void InsertListOfValue(ListOfValue instance);
    partial void UpdateListOfValue(ListOfValue instance);
    partial void DeleteListOfValue(ListOfValue instance);
    partial void InsertUserProject(UserProject instance);
    partial void UpdateUserProject(UserProject instance);
    partial void DeleteUserProject(UserProject instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertSku(Sku instance);
    partial void UpdateSku(Sku instance);
    partial void DeleteSku(Sku instance);
    partial void InsertTaxonomyMetaData(TaxonomyMetaData instance);
    partial void UpdateTaxonomyMetaData(TaxonomyMetaData instance);
    partial void DeleteTaxonomyMetaData(TaxonomyMetaData instance);
    partial void InsertRemark(Remark instance);
    partial void UpdateRemark(Remark instance);
    partial void DeleteRemark(Remark instance);
    partial void InsertTaxonomyData(TaxonomyData instance);
    partial void UpdateTaxonomyData(TaxonomyData instance);
    partial void DeleteTaxonomyData(TaxonomyData instance);
    partial void InsertAttribute(Attribute instance);
    partial void UpdateAttribute(Attribute instance);
    partial void DeleteAttribute(Attribute instance);
    partial void InsertSchemaMetaInfo(SchemaMetaInfo instance);
    partial void UpdateSchemaMetaInfo(SchemaMetaInfo instance);
    partial void DeleteSchemaMetaInfo(SchemaMetaInfo instance);
    partial void InsertTaxonomyMetaInfo(TaxonomyMetaInfo instance);
    partial void UpdateTaxonomyMetaInfo(TaxonomyMetaInfo instance);
    partial void DeleteTaxonomyMetaInfo(TaxonomyMetaInfo instance);
    partial void InsertAttributeGroup(AttributeGroup instance);
    partial void UpdateAttributeGroup(AttributeGroup instance);
    partial void DeleteAttributeGroup(AttributeGroup instance);
    partial void InsertAttributeMetaData(AttributeMetaData instance);
    partial void UpdateAttributeMetaData(AttributeMetaData instance);
    partial void DeleteAttributeMetaData(AttributeMetaData instance);
    partial void InsertAttributeMetaInfo(AttributeMetaInfo instance);
    partial void UpdateAttributeMetaInfo(AttributeMetaInfo instance);
    partial void DeleteAttributeMetaInfo(AttributeMetaInfo instance);
    partial void InsertDerivedEntityData(DerivedEntityData instance);
    partial void UpdateDerivedEntityData(DerivedEntityData instance);
    partial void DeleteDerivedEntityData(DerivedEntityData instance);
    partial void InsertEntityData(EntityData instance);
    partial void UpdateEntityData(EntityData instance);
    partial void DeleteEntityData(EntityData instance);
    partial void InsertProject(Project instance);
    partial void UpdateProject(Project instance);
    partial void DeleteProject(Project instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertUnitOfMeasure(UnitOfMeasure instance);
    partial void UpdateUnitOfMeasure(UnitOfMeasure instance);
    partial void DeleteUnitOfMeasure(UnitOfMeasure instance);
    #endregion
		
		public AryaDbDataContext() : 
				base(global::Arya.Framework.Properties.Settings.Default.AryaDbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AryaDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AryaDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AryaDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AryaDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<DerivedAttribute> DerivedAttributes
		{
			get
			{
				return this.GetTable<DerivedAttribute>();
			}
		}
		
		public System.Data.Linq.Table<DerivedTaxonomy> DerivedTaxonomies
		{
			get
			{
				return this.GetTable<DerivedTaxonomy>();
			}
		}
		
		public System.Data.Linq.Table<EntityInfo> EntityInfos
		{
			get
			{
				return this.GetTable<EntityInfo>();
			}
		}
		
		public System.Data.Linq.Table<ProjectUom> ProjectUoms
		{
			get
			{
				return this.GetTable<ProjectUom>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<SchemaData> SchemaDatas
		{
			get
			{
				return this.GetTable<SchemaData>();
			}
		}
		
		public System.Data.Linq.Table<SchemaInfo> SchemaInfos
		{
			get
			{
				return this.GetTable<SchemaInfo>();
			}
		}
		
		public System.Data.Linq.Table<SchemaMetaData> SchemaMetaDatas
		{
			get
			{
				return this.GetTable<SchemaMetaData>();
			}
		}
		
		public System.Data.Linq.Table<SkuInfo> SkuInfos
		{
			get
			{
				return this.GetTable<SkuInfo>();
			}
		}
		
		public System.Data.Linq.Table<SkuLink> SkuLinks
		{
			get
			{
				return this.GetTable<SkuLink>();
			}
		}
		
		public System.Data.Linq.Table<TaxonomyInfo> TaxonomyInfos
		{
			get
			{
				return this.GetTable<TaxonomyInfo>();
			}
		}
		
		public System.Data.Linq.Table<UIObject> UIObjects
		{
			get
			{
				return this.GetTable<UIObject>();
			}
		}
		
		public System.Data.Linq.Table<Checkpoint> Checkpoints
		{
			get
			{
				return this.GetTable<Checkpoint>();
			}
		}
		
		public System.Data.Linq.Table<SkuGroup> SkuGroups
		{
			get
			{
				return this.GetTable<SkuGroup>();
			}
		}
		
		public System.Data.Linq.Table<GroupNote> GroupNotes
		{
			get
			{
				return this.GetTable<GroupNote>();
			}
		}
		
		public System.Data.Linq.Table<ListOfValue> ListOfValues
		{
			get
			{
				return this.GetTable<ListOfValue>();
			}
		}
		
		public System.Data.Linq.Table<UserProject> UserProjects
		{
			get
			{
				return this.GetTable<UserProject>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Sku> Skus
		{
			get
			{
				return this.GetTable<Sku>();
			}
		}
		
		public System.Data.Linq.Table<TaxonomyMetaData> TaxonomyMetaDatas
		{
			get
			{
				return this.GetTable<TaxonomyMetaData>();
			}
		}
		
		public System.Data.Linq.Table<Remark> Remarks
		{
			get
			{
				return this.GetTable<Remark>();
			}
		}
		
		public System.Data.Linq.Table<TaxonomyData> TaxonomyDatas
		{
			get
			{
				return this.GetTable<TaxonomyData>();
			}
		}
		
		public System.Data.Linq.Table<Attribute> Attributes
		{
			get
			{
				return this.GetTable<Attribute>();
			}
		}
		
		public System.Data.Linq.Table<SchemaMetaInfo> SchemaMetaInfos
		{
			get
			{
				return this.GetTable<SchemaMetaInfo>();
			}
		}
		
		public System.Data.Linq.Table<TaxonomyMetaInfo> TaxonomyMetaInfos
		{
			get
			{
				return this.GetTable<TaxonomyMetaInfo>();
			}
		}
		
		public System.Data.Linq.Table<AttributeGroup> AttributeGroups
		{
			get
			{
				return this.GetTable<AttributeGroup>();
			}
		}
		
		public System.Data.Linq.Table<AttributeMetaData> AttributeMetaDatas
		{
			get
			{
				return this.GetTable<AttributeMetaData>();
			}
		}
		
		public System.Data.Linq.Table<AttributeMetaInfo> AttributeMetaInfos
		{
			get
			{
				return this.GetTable<AttributeMetaInfo>();
			}
		}
		
		public System.Data.Linq.Table<DerivedEntityData> DerivedEntityDatas
		{
			get
			{
				return this.GetTable<DerivedEntityData>();
			}
		}
		
		public System.Data.Linq.Table<EntityData> EntityDatas
		{
			get
			{
				return this.GetTable<EntityData>();
			}
		}
		
		public System.Data.Linq.Table<Project> Projects
		{
			get
			{
				return this.GetTable<Project>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<UnitOfMeasure> UnitOfMeasures
		{
			get
			{
				return this.GetTable<UnitOfMeasure>();
			}
		}
		
		public System.Data.Linq.Table<IgnoreWord> IgnoreWords
		{
			get
			{
				return this.GetTable<IgnoreWord>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DerivedAttribute")]
	public partial class DerivedAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _AttributeID;
		
		private System.Nullable<System.Guid> _TaxonomyID;
		
		private string _Expression;
		
		private int _MaxResultLength;
		
		private EntityRef<TaxonomyInfo> _TaxonomyInfo;
		
		private EntityRef<Attribute> _Attribute;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnAttributeIDChanging(System.Guid value);
    partial void OnAttributeIDChanged();
    partial void OnTaxonomyIDChanging(System.Nullable<System.Guid> value);
    partial void OnTaxonomyIDChanged();
    partial void OnExpressionChanging(string value);
    partial void OnExpressionChanged();
    partial void OnMaxResultLengthChanging(int value);
    partial void OnMaxResultLengthChanged();
    #endregion
		
		public DerivedAttribute()
		{
			this._TaxonomyInfo = default(EntityRef<TaxonomyInfo>);
			this._Attribute = default(EntityRef<Attribute>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttributeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AttributeID
		{
			get
			{
				return this._AttributeID;
			}
			set
			{
				if ((this._AttributeID != value))
				{
					if (this._Attribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttributeIDChanging(value);
					this.SendPropertyChanging();
					this._AttributeID = value;
					this.SendPropertyChanged("AttributeID");
					this.OnAttributeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxonomyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> TaxonomyID
		{
			get
			{
				return this._TaxonomyID;
			}
			set
			{
				if ((this._TaxonomyID != value))
				{
					if (this._TaxonomyInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaxonomyIDChanging(value);
					this.SendPropertyChanging();
					this._TaxonomyID = value;
					this.SendPropertyChanged("TaxonomyID");
					this.OnTaxonomyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expression", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string Expression
		{
			get
			{
				return this._Expression;
			}
			set
			{
				if ((this._Expression != value))
				{
					this.OnExpressionChanging(value);
					this.SendPropertyChanging();
					this._Expression = value;
					this.SendPropertyChanged("Expression");
					this.OnExpressionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxResultLength", DbType="Int NOT NULL")]
		public int MaxResultLength
		{
			get
			{
				return this._MaxResultLength;
			}
			set
			{
				if ((this._MaxResultLength != value))
				{
					this.OnMaxResultLengthChanging(value);
					this.SendPropertyChanging();
					this._MaxResultLength = value;
					this.SendPropertyChanged("MaxResultLength");
					this.OnMaxResultLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaxonomyInfo_DerivedAttribute", Storage="_TaxonomyInfo", ThisKey="TaxonomyID", OtherKey="ID", IsForeignKey=true)]
		public TaxonomyInfo TaxonomyInfo
		{
			get
			{
				return this._TaxonomyInfo.Entity;
			}
			set
			{
				TaxonomyInfo previousValue = this._TaxonomyInfo.Entity;
				if (((previousValue != value) 
							|| (this._TaxonomyInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaxonomyInfo.Entity = null;
						previousValue.DerivedAttributes.Remove(this);
					}
					this._TaxonomyInfo.Entity = value;
					if ((value != null))
					{
						value.DerivedAttributes.Add(this);
						this._TaxonomyID = value.ID;
					}
					else
					{
						this._TaxonomyID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("TaxonomyInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attribute_DerivedAttribute", Storage="_Attribute", ThisKey="AttributeID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Attribute Attribute
		{
			get
			{
				return this._Attribute.Entity;
			}
			set
			{
				Attribute previousValue = this._Attribute.Entity;
				if (((previousValue != value) 
							|| (this._Attribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attribute.Entity = null;
						previousValue.DerivedAttributes.Remove(this);
					}
					this._Attribute.Entity = value;
					if ((value != null))
					{
						value.DerivedAttributes.Add(this);
						this._AttributeID = value.ID;
					}
					else
					{
						this._AttributeID = default(System.Guid);
					}
					this.SendPropertyChanged("Attribute");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DerivedTaxonomy")]
	public partial class DerivedTaxonomy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _TaxonomyID;
		
		private System.Xml.Linq.XElement _Expression;
		
		private EntityRef<TaxonomyInfo> _TaxonomyInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnTaxonomyIDChanging(System.Guid value);
    partial void OnTaxonomyIDChanged();
    partial void OnExpressionChanging(System.Xml.Linq.XElement value);
    partial void OnExpressionChanged();
    #endregion
		
		public DerivedTaxonomy()
		{
			this._TaxonomyInfo = default(EntityRef<TaxonomyInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxonomyID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TaxonomyID
		{
			get
			{
				return this._TaxonomyID;
			}
			set
			{
				if ((this._TaxonomyID != value))
				{
					if (this._TaxonomyInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaxonomyIDChanging(value);
					this.SendPropertyChanging();
					this._TaxonomyID = value;
					this.SendPropertyChanged("TaxonomyID");
					this.OnTaxonomyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expression", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Expression
		{
			get
			{
				return this._Expression;
			}
			set
			{
				if ((this._Expression != value))
				{
					this.OnExpressionChanging(value);
					this.SendPropertyChanging();
					this._Expression = value;
					this.SendPropertyChanged("Expression");
					this.OnExpressionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaxonomyInfo_DerivedTaxonomy", Storage="_TaxonomyInfo", ThisKey="TaxonomyID", OtherKey="ID", IsForeignKey=true)]
		public TaxonomyInfo TaxonomyInfo
		{
			get
			{
				return this._TaxonomyInfo.Entity;
			}
			set
			{
				TaxonomyInfo previousValue = this._TaxonomyInfo.Entity;
				if (((previousValue != value) 
							|| (this._TaxonomyInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaxonomyInfo.Entity = null;
						previousValue.DerivedTaxonomies.Remove(this);
					}
					this._TaxonomyInfo.Entity = value;
					if ((value != null))
					{
						value.DerivedTaxonomies.Add(this);
						this._TaxonomyID = value.ID;
					}
					else
					{
						this._TaxonomyID = default(System.Guid);
					}
					this.SendPropertyChanged("TaxonomyInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntityInfo")]
	public partial class EntityInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _SkuID;
		
		private EntitySet<EntityData> _EntityDatas;
		
		private EntityRef<Sku> _Sku;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnSkuIDChanging(System.Guid value);
    partial void OnSkuIDChanged();
    #endregion
		
		public EntityInfo()
		{
			this._EntityDatas = new EntitySet<EntityData>(new Action<EntityData>(this.attach_EntityDatas), new Action<EntityData>(this.detach_EntityDatas));
			this._Sku = default(EntityRef<Sku>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkuID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SkuID
		{
			get
			{
				return this._SkuID;
			}
			set
			{
				if ((this._SkuID != value))
				{
					if (this._Sku.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSkuIDChanging(value);
					this.SendPropertyChanging();
					this._SkuID = value;
					this.SendPropertyChanged("SkuID");
					this.OnSkuIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityInfo_EntityData", Storage="_EntityDatas", ThisKey="ID", OtherKey="EntityID")]
		public EntitySet<EntityData> EntityDatas
		{
			get
			{
				return this._EntityDatas;
			}
			set
			{
				this._EntityDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sku_EntityInfo", Storage="_Sku", ThisKey="SkuID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Sku Sku
		{
			get
			{
				return this._Sku.Entity;
			}
			set
			{
				Sku previousValue = this._Sku.Entity;
				if (((previousValue != value) 
							|| (this._Sku.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sku.Entity = null;
						previousValue.EntityInfos.Remove(this);
					}
					this._Sku.Entity = value;
					if ((value != null))
					{
						value.EntityInfos.Add(this);
						this._SkuID = value.ID;
					}
					else
					{
						this._SkuID = default(System.Guid);
					}
					this.SendPropertyChanged("Sku");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EntityDatas(EntityData entity)
		{
			this.SendPropertyChanging();
			entity.EntityInfo = this;
		}
		
		private void detach_EntityDatas(EntityData entity)
		{
			this.SendPropertyChanging();
			entity.EntityInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProjectUom")]
	public partial class ProjectUom : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _ProjectID;
		
		private System.Guid _UomID;
		
		private string _Uom;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<UnitOfMeasure> _UnitOfMeasure;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnProjectIDChanging(System.Guid value);
    partial void OnProjectIDChanged();
    partial void OnUomIDChanging(System.Guid value);
    partial void OnUomIDChanged();
    partial void OnUomChanging(string value);
    partial void OnUomChanged();
    #endregion
		
		public ProjectUom()
		{
			this._Project = default(EntityRef<Project>);
			this._UnitOfMeasure = default(EntityRef<UnitOfMeasure>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UomID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UomID
		{
			get
			{
				return this._UomID;
			}
			set
			{
				if ((this._UomID != value))
				{
					if (this._UnitOfMeasure.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUomIDChanging(value);
					this.SendPropertyChanging();
					this._UomID = value;
					this.SendPropertyChanged("UomID");
					this.OnUomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uom", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Uom
		{
			get
			{
				return this._Uom;
			}
			set
			{
				if ((this._Uom != value))
				{
					this.OnUomChanging(value);
					this.SendPropertyChanging();
					this._Uom = value;
					this.SendPropertyChanged("Uom");
					this.OnUomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectUom", Storage="_Project", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.ProjectUoms.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.ProjectUoms.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(System.Guid);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitOfMeasure_ProjectUom", Storage="_UnitOfMeasure", ThisKey="UomID", OtherKey="ID", IsForeignKey=true)]
		public UnitOfMeasure UnitOfMeasure
		{
			get
			{
				return this._UnitOfMeasure.Entity;
			}
			set
			{
				UnitOfMeasure previousValue = this._UnitOfMeasure.Entity;
				if (((previousValue != value) 
							|| (this._UnitOfMeasure.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitOfMeasure.Entity = null;
						previousValue.ProjectUoms.Remove(this);
					}
					this._UnitOfMeasure.Entity = value;
					if ((value != null))
					{
						value.ProjectUoms.Add(this);
						this._UomID = value.ID;
					}
					else
					{
						this._UomID = default(System.Guid);
					}
					this.SendPropertyChanged("UnitOfMeasure");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _GroupID;
		
		private bool _Permission;
		
		private System.Guid _ObjectID;
		
		private string _ObjectType;
		
		private EntityRef<Group> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnGroupIDChanging(System.Guid value);
    partial void OnGroupIDChanged();
    partial void OnPermissionChanging(bool value);
    partial void OnPermissionChanged();
    partial void OnObjectIDChanging(System.Guid value);
    partial void OnObjectIDChanged();
    partial void OnObjectTypeChanging(string value);
    partial void OnObjectTypeChanged();
    #endregion
		
		public Role()
		{
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Permission", DbType="Bit NOT NULL")]
		public bool Permission
		{
			get
			{
				return this._Permission;
			}
			set
			{
				if ((this._Permission != value))
				{
					this.OnPermissionChanging(value);
					this.SendPropertyChanging();
					this._Permission = value;
					this.SendPropertyChanged("Permission");
					this.OnPermissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ObjectID
		{
			get
			{
				return this._ObjectID;
			}
			set
			{
				if ((this._ObjectID != value))
				{
					this.OnObjectIDChanging(value);
					this.SendPropertyChanging();
					this._ObjectID = value;
					this.SendPropertyChanged("ObjectID");
					this.OnObjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectType", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string ObjectType
		{
			get
			{
				return this._ObjectType;
			}
			set
			{
				if ((this._ObjectType != value))
				{
					this.OnObjectTypeChanging(value);
					this.SendPropertyChanging();
					this._ObjectType = value;
					this.SendPropertyChanged("ObjectType");
					this.OnObjectTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Role", Storage="_Group", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.Roles.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.Roles.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(System.Guid);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SchemaData")]
	public partial class SchemaData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _SchemaID;
		
		private bool _InSchema;
		
		private string _DataType;
		
		private decimal _NavigationOrder;
		
		private decimal _DisplayOrder;
		
		private System.DateTime _CreatedOn;
		
		private System.Guid _CreatedBy;
		
		private System.Nullable<System.Guid> _CreatedRemark;
		
		private System.Nullable<System.DateTime> _DeletedOn;
		
		private System.Nullable<System.Guid> _DeletedBy;
		
		private System.Nullable<System.Guid> _DeletedRemark;
		
		private bool _Active;
		
		private EntityRef<SchemaInfo> _SchemaInfo;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
		private EntityRef<Remark> _Remark;
		
		private EntityRef<Remark> _Remark1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnSchemaIDChanging(System.Guid value);
    partial void OnSchemaIDChanged();
    partial void OnInSchemaChanging(bool value);
    partial void OnInSchemaChanged();
    partial void OnDataTypeChanging(string value);
    partial void OnDataTypeChanged();
    partial void OnNavigationOrderChanging(decimal value);
    partial void OnNavigationOrderChanged();
    partial void OnDisplayOrderChanging(decimal value);
    partial void OnDisplayOrderChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnCreatedRemarkChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedRemarkChanged();
    partial void OnDeletedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedOnChanged();
    partial void OnDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnDeletedByChanged();
    partial void OnDeletedRemarkChanging(System.Nullable<System.Guid> value);
    partial void OnDeletedRemarkChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public SchemaData()
		{
			this._SchemaInfo = default(EntityRef<SchemaInfo>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			this._Remark = default(EntityRef<Remark>);
			this._Remark1 = default(EntityRef<Remark>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchemaID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchemaID
		{
			get
			{
				return this._SchemaID;
			}
			set
			{
				if ((this._SchemaID != value))
				{
					if (this._SchemaInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchemaIDChanging(value);
					this.SendPropertyChanging();
					this._SchemaID = value;
					this.SendPropertyChanged("SchemaID");
					this.OnSchemaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InSchema", DbType="Bit NOT NULL")]
		public bool InSchema
		{
			get
			{
				return this._InSchema;
			}
			set
			{
				if ((this._InSchema != value))
				{
					this.OnInSchemaChanging(value);
					this.SendPropertyChanging();
					this._InSchema = value;
					this.SendPropertyChanged("InSchema");
					this.OnInSchemaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DataType
		{
			get
			{
				return this._DataType;
			}
			set
			{
				if ((this._DataType != value))
				{
					this.OnDataTypeChanging(value);
					this.SendPropertyChanging();
					this._DataType = value;
					this.SendPropertyChanged("DataType");
					this.OnDataTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NavigationOrder", DbType="Decimal(6,3) NOT NULL")]
		public decimal NavigationOrder
		{
			get
			{
				return this._NavigationOrder;
			}
			set
			{
				if ((this._NavigationOrder != value))
				{
					this.OnNavigationOrderChanging(value);
					this.SendPropertyChanging();
					this._NavigationOrder = value;
					this.SendPropertyChanged("NavigationOrder");
					this.OnNavigationOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayOrder", DbType="Decimal(6,3) NOT NULL")]
		public decimal DisplayOrder
		{
			get
			{
				return this._DisplayOrder;
			}
			set
			{
				if ((this._DisplayOrder != value))
				{
					this.OnDisplayOrderChanging(value);
					this.SendPropertyChanging();
					this._DisplayOrder = value;
					this.SendPropertyChanged("DisplayOrder");
					this.OnDisplayOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedRemark", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedRemark
		{
			get
			{
				return this._CreatedRemark;
			}
			set
			{
				if ((this._CreatedRemark != value))
				{
					if (this._Remark.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedRemarkChanging(value);
					this.SendPropertyChanging();
					this._CreatedRemark = value;
					this.SendPropertyChanged("CreatedRemark");
					this.OnCreatedRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedOn
		{
			get
			{
				return this._DeletedOn;
			}
			set
			{
				if ((this._DeletedOn != value))
				{
					this.OnDeletedOnChanging(value);
					this.SendPropertyChanging();
					this._DeletedOn = value;
					this.SendPropertyChanged("DeletedOn");
					this.OnDeletedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DeletedBy
		{
			get
			{
				return this._DeletedBy;
			}
			set
			{
				if ((this._DeletedBy != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeletedByChanging(value);
					this.SendPropertyChanging();
					this._DeletedBy = value;
					this.SendPropertyChanged("DeletedBy");
					this.OnDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedRemark", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DeletedRemark
		{
			get
			{
				return this._DeletedRemark;
			}
			set
			{
				if ((this._DeletedRemark != value))
				{
					if (this._Remark1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeletedRemarkChanging(value);
					this.SendPropertyChanging();
					this._DeletedRemark = value;
					this.SendPropertyChanged("DeletedRemark");
					this.OnDeletedRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchemaInfo_SchemaData", Storage="_SchemaInfo", ThisKey="SchemaID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SchemaInfo SchemaInfo
		{
			get
			{
				return this._SchemaInfo.Entity;
			}
			set
			{
				SchemaInfo previousValue = this._SchemaInfo.Entity;
				if (((previousValue != value) 
							|| (this._SchemaInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchemaInfo.Entity = null;
						previousValue.SchemaDatas.Remove(this);
					}
					this._SchemaInfo.Entity = value;
					if ((value != null))
					{
						value.SchemaDatas.Add(this);
						this._SchemaID = value.ID;
					}
					else
					{
						this._SchemaID = default(System.Guid);
					}
					this.SendPropertyChanged("SchemaInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SchemaData", Storage="_User", ThisKey="CreatedBy", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.SchemaDatas.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.SchemaDatas.Add(this);
						this._CreatedBy = value.ID;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SchemaData1", Storage="_User1", ThisKey="DeletedBy", OtherKey="ID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.SchemaDatas1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.SchemaDatas1.Add(this);
						this._DeletedBy = value.ID;
					}
					else
					{
						this._DeletedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Remark_SchemaData", Storage="_Remark", ThisKey="CreatedRemark", OtherKey="ID", IsForeignKey=true)]
		public Remark Remark
		{
			get
			{
				return this._Remark.Entity;
			}
			set
			{
				Remark previousValue = this._Remark.Entity;
				if (((previousValue != value) 
							|| (this._Remark.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Remark.Entity = null;
						previousValue.SchemaDatas.Remove(this);
					}
					this._Remark.Entity = value;
					if ((value != null))
					{
						value.SchemaDatas.Add(this);
						this._CreatedRemark = value.ID;
					}
					else
					{
						this._CreatedRemark = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Remark");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Remark_SchemaData1", Storage="_Remark1", ThisKey="DeletedRemark", OtherKey="ID", IsForeignKey=true)]
		public Remark Remark1
		{
			get
			{
				return this._Remark1.Entity;
			}
			set
			{
				Remark previousValue = this._Remark1.Entity;
				if (((previousValue != value) 
							|| (this._Remark1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Remark1.Entity = null;
						previousValue.SchemaDatas1.Remove(this);
					}
					this._Remark1.Entity = value;
					if ((value != null))
					{
						value.SchemaDatas1.Add(this);
						this._DeletedRemark = value.ID;
					}
					else
					{
						this._DeletedRemark = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Remark1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SchemaInfo")]
	public partial class SchemaInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _TaxonomyID;
		
		private System.Guid _AttributeID;
		
		private EntitySet<SchemaData> _SchemaDatas;
		
		private EntitySet<ListOfValue> _ListOfValues;
		
		private EntitySet<SchemaMetaInfo> _SchemaMetaInfos;
		
		private EntityRef<TaxonomyInfo> _TaxonomyInfo;
		
		private EntityRef<Attribute> _Attribute;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnTaxonomyIDChanging(System.Guid value);
    partial void OnTaxonomyIDChanged();
    partial void OnAttributeIDChanging(System.Guid value);
    partial void OnAttributeIDChanged();
    #endregion
		
		public SchemaInfo()
		{
			this._SchemaDatas = new EntitySet<SchemaData>(new Action<SchemaData>(this.attach_SchemaDatas), new Action<SchemaData>(this.detach_SchemaDatas));
			this._ListOfValues = new EntitySet<ListOfValue>(new Action<ListOfValue>(this.attach_ListOfValues), new Action<ListOfValue>(this.detach_ListOfValues));
			this._SchemaMetaInfos = new EntitySet<SchemaMetaInfo>(new Action<SchemaMetaInfo>(this.attach_SchemaMetaInfos), new Action<SchemaMetaInfo>(this.detach_SchemaMetaInfos));
			this._TaxonomyInfo = default(EntityRef<TaxonomyInfo>);
			this._Attribute = default(EntityRef<Attribute>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxonomyID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TaxonomyID
		{
			get
			{
				return this._TaxonomyID;
			}
			set
			{
				if ((this._TaxonomyID != value))
				{
					if (this._TaxonomyInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaxonomyIDChanging(value);
					this.SendPropertyChanging();
					this._TaxonomyID = value;
					this.SendPropertyChanged("TaxonomyID");
					this.OnTaxonomyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttributeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AttributeID
		{
			get
			{
				return this._AttributeID;
			}
			set
			{
				if ((this._AttributeID != value))
				{
					if (this._Attribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttributeIDChanging(value);
					this.SendPropertyChanging();
					this._AttributeID = value;
					this.SendPropertyChanged("AttributeID");
					this.OnAttributeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchemaInfo_SchemaData", Storage="_SchemaDatas", ThisKey="ID", OtherKey="SchemaID")]
		public EntitySet<SchemaData> SchemaDatas
		{
			get
			{
				return this._SchemaDatas;
			}
			set
			{
				this._SchemaDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchemaInfo_ListOfValue", Storage="_ListOfValues", ThisKey="ID", OtherKey="SchemaID")]
		public EntitySet<ListOfValue> ListOfValues
		{
			get
			{
				return this._ListOfValues;
			}
			set
			{
				this._ListOfValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchemaInfo_SchemaMetaInfo", Storage="_SchemaMetaInfos", ThisKey="ID", OtherKey="SchemaID")]
		public EntitySet<SchemaMetaInfo> SchemaMetaInfos
		{
			get
			{
				return this._SchemaMetaInfos;
			}
			set
			{
				this._SchemaMetaInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaxonomyInfo_SchemaInfo", Storage="_TaxonomyInfo", ThisKey="TaxonomyID", OtherKey="ID", IsForeignKey=true)]
		public TaxonomyInfo TaxonomyInfo
		{
			get
			{
				return this._TaxonomyInfo.Entity;
			}
			set
			{
				TaxonomyInfo previousValue = this._TaxonomyInfo.Entity;
				if (((previousValue != value) 
							|| (this._TaxonomyInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaxonomyInfo.Entity = null;
						previousValue.SchemaInfos.Remove(this);
					}
					this._TaxonomyInfo.Entity = value;
					if ((value != null))
					{
						value.SchemaInfos.Add(this);
						this._TaxonomyID = value.ID;
					}
					else
					{
						this._TaxonomyID = default(System.Guid);
					}
					this.SendPropertyChanged("TaxonomyInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attribute_SchemaInfo", Storage="_Attribute", ThisKey="AttributeID", OtherKey="ID", IsForeignKey=true)]
		public Attribute Attribute
		{
			get
			{
				return this._Attribute.Entity;
			}
			set
			{
				Attribute previousValue = this._Attribute.Entity;
				if (((previousValue != value) 
							|| (this._Attribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attribute.Entity = null;
						previousValue.SchemaInfos.Remove(this);
					}
					this._Attribute.Entity = value;
					if ((value != null))
					{
						value.SchemaInfos.Add(this);
						this._AttributeID = value.ID;
					}
					else
					{
						this._AttributeID = default(System.Guid);
					}
					this.SendPropertyChanged("Attribute");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SchemaDatas(SchemaData entity)
		{
			this.SendPropertyChanging();
			entity.SchemaInfo = this;
		}
		
		private void detach_SchemaDatas(SchemaData entity)
		{
			this.SendPropertyChanging();
			entity.SchemaInfo = null;
		}
		
		private void attach_ListOfValues(ListOfValue entity)
		{
			this.SendPropertyChanging();
			entity.SchemaInfo = this;
		}
		
		private void detach_ListOfValues(ListOfValue entity)
		{
			this.SendPropertyChanging();
			entity.SchemaInfo = null;
		}
		
		private void attach_SchemaMetaInfos(SchemaMetaInfo entity)
		{
			this.SendPropertyChanging();
			entity.SchemaInfo = this;
		}
		
		private void detach_SchemaMetaInfos(SchemaMetaInfo entity)
		{
			this.SendPropertyChanging();
			entity.SchemaInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SchemaMetaData")]
	public partial class SchemaMetaData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _MetaID;
		
		private string _Value;
		
		private System.DateTime _CreatedOn;
		
		private System.Guid _CreatedBy;
		
		private System.Nullable<System.Guid> _CreatedRemark;
		
		private System.Nullable<System.DateTime> _DeletedOn;
		
		private System.Nullable<System.Guid> _DeletedBy;
		
		private System.Nullable<System.Guid> _DeletedRemark;
		
		private bool _Active;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
		private EntityRef<Remark> _Remark;
		
		private EntityRef<Remark> _Remark1;
		
		private EntityRef<SchemaMetaInfo> _SchemaMetaInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnMetaIDChanging(System.Guid value);
    partial void OnMetaIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnCreatedRemarkChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedRemarkChanged();
    partial void OnDeletedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedOnChanged();
    partial void OnDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnDeletedByChanged();
    partial void OnDeletedRemarkChanging(System.Nullable<System.Guid> value);
    partial void OnDeletedRemarkChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public SchemaMetaData()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			this._Remark = default(EntityRef<Remark>);
			this._Remark1 = default(EntityRef<Remark>);
			this._SchemaMetaInfo = default(EntityRef<SchemaMetaInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetaID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid MetaID
		{
			get
			{
				return this._MetaID;
			}
			set
			{
				if ((this._MetaID != value))
				{
					if (this._SchemaMetaInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetaIDChanging(value);
					this.SendPropertyChanging();
					this._MetaID = value;
					this.SendPropertyChanged("MetaID");
					this.OnMetaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedRemark", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedRemark
		{
			get
			{
				return this._CreatedRemark;
			}
			set
			{
				if ((this._CreatedRemark != value))
				{
					if (this._Remark.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedRemarkChanging(value);
					this.SendPropertyChanging();
					this._CreatedRemark = value;
					this.SendPropertyChanged("CreatedRemark");
					this.OnCreatedRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedOn
		{
			get
			{
				return this._DeletedOn;
			}
			set
			{
				if ((this._DeletedOn != value))
				{
					this.OnDeletedOnChanging(value);
					this.SendPropertyChanging();
					this._DeletedOn = value;
					this.SendPropertyChanged("DeletedOn");
					this.OnDeletedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DeletedBy
		{
			get
			{
				return this._DeletedBy;
			}
			set
			{
				if ((this._DeletedBy != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeletedByChanging(value);
					this.SendPropertyChanging();
					this._DeletedBy = value;
					this.SendPropertyChanged("DeletedBy");
					this.OnDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedRemark", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DeletedRemark
		{
			get
			{
				return this._DeletedRemark;
			}
			set
			{
				if ((this._DeletedRemark != value))
				{
					if (this._Remark1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeletedRemarkChanging(value);
					this.SendPropertyChanging();
					this._DeletedRemark = value;
					this.SendPropertyChanged("DeletedRemark");
					this.OnDeletedRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SchemaMetaData", Storage="_User", ThisKey="CreatedBy", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.SchemaMetaDatas.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.SchemaMetaDatas.Add(this);
						this._CreatedBy = value.ID;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SchemaMetaData1", Storage="_User1", ThisKey="DeletedBy", OtherKey="ID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.SchemaMetaDatas1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.SchemaMetaDatas1.Add(this);
						this._DeletedBy = value.ID;
					}
					else
					{
						this._DeletedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Remark_SchemaMetaData", Storage="_Remark", ThisKey="CreatedRemark", OtherKey="ID", IsForeignKey=true)]
		public Remark Remark
		{
			get
			{
				return this._Remark.Entity;
			}
			set
			{
				Remark previousValue = this._Remark.Entity;
				if (((previousValue != value) 
							|| (this._Remark.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Remark.Entity = null;
						previousValue.SchemaMetaDatas.Remove(this);
					}
					this._Remark.Entity = value;
					if ((value != null))
					{
						value.SchemaMetaDatas.Add(this);
						this._CreatedRemark = value.ID;
					}
					else
					{
						this._CreatedRemark = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Remark");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Remark_SchemaMetaData1", Storage="_Remark1", ThisKey="DeletedRemark", OtherKey="ID", IsForeignKey=true)]
		public Remark Remark1
		{
			get
			{
				return this._Remark1.Entity;
			}
			set
			{
				Remark previousValue = this._Remark1.Entity;
				if (((previousValue != value) 
							|| (this._Remark1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Remark1.Entity = null;
						previousValue.SchemaMetaDatas1.Remove(this);
					}
					this._Remark1.Entity = value;
					if ((value != null))
					{
						value.SchemaMetaDatas1.Add(this);
						this._DeletedRemark = value.ID;
					}
					else
					{
						this._DeletedRemark = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Remark1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchemaMetaInfo_SchemaMetaData", Storage="_SchemaMetaInfo", ThisKey="MetaID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SchemaMetaInfo SchemaMetaInfo
		{
			get
			{
				return this._SchemaMetaInfo.Entity;
			}
			set
			{
				SchemaMetaInfo previousValue = this._SchemaMetaInfo.Entity;
				if (((previousValue != value) 
							|| (this._SchemaMetaInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchemaMetaInfo.Entity = null;
						previousValue.SchemaMetaDatas.Remove(this);
					}
					this._SchemaMetaInfo.Entity = value;
					if ((value != null))
					{
						value.SchemaMetaDatas.Add(this);
						this._MetaID = value.ID;
					}
					else
					{
						this._MetaID = default(System.Guid);
					}
					this.SendPropertyChanged("SchemaMetaInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SkuInfo")]
	public partial class SkuInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _SkuID;
		
		private System.Guid _TaxonomyID;
		
		private System.DateTime _CreatedOn;
		
		private System.Guid _CreatedBy;
		
		private System.Nullable<System.Guid> _CreatedRemark;
		
		private bool _Active;
		
		private EntityRef<TaxonomyInfo> _TaxonomyInfo;
		
		private EntityRef<User> _User;
		
		private EntityRef<Sku> _Sku;
		
		private EntityRef<Remark> _Remark;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnSkuIDChanging(System.Guid value);
    partial void OnSkuIDChanged();
    partial void OnTaxonomyIDChanging(System.Guid value);
    partial void OnTaxonomyIDChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnCreatedRemarkChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedRemarkChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public SkuInfo()
		{
			this._TaxonomyInfo = default(EntityRef<TaxonomyInfo>);
			this._User = default(EntityRef<User>);
			this._Sku = default(EntityRef<Sku>);
			this._Remark = default(EntityRef<Remark>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkuID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SkuID
		{
			get
			{
				return this._SkuID;
			}
			set
			{
				if ((this._SkuID != value))
				{
					if (this._Sku.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSkuIDChanging(value);
					this.SendPropertyChanging();
					this._SkuID = value;
					this.SendPropertyChanged("SkuID");
					this.OnSkuIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxonomyID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TaxonomyID
		{
			get
			{
				return this._TaxonomyID;
			}
			set
			{
				if ((this._TaxonomyID != value))
				{
					if (this._TaxonomyInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaxonomyIDChanging(value);
					this.SendPropertyChanging();
					this._TaxonomyID = value;
					this.SendPropertyChanged("TaxonomyID");
					this.OnTaxonomyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedRemark", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedRemark
		{
			get
			{
				return this._CreatedRemark;
			}
			set
			{
				if ((this._CreatedRemark != value))
				{
					if (this._Remark.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedRemarkChanging(value);
					this.SendPropertyChanging();
					this._CreatedRemark = value;
					this.SendPropertyChanged("CreatedRemark");
					this.OnCreatedRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaxonomyInfo_SkuInfo", Storage="_TaxonomyInfo", ThisKey="TaxonomyID", OtherKey="ID", IsForeignKey=true)]
		public TaxonomyInfo TaxonomyInfo
		{
			get
			{
				return this._TaxonomyInfo.Entity;
			}
			set
			{
				TaxonomyInfo previousValue = this._TaxonomyInfo.Entity;
				if (((previousValue != value) 
							|| (this._TaxonomyInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaxonomyInfo.Entity = null;
						previousValue.SkuInfos.Remove(this);
					}
					this._TaxonomyInfo.Entity = value;
					if ((value != null))
					{
						value.SkuInfos.Add(this);
						this._TaxonomyID = value.ID;
					}
					else
					{
						this._TaxonomyID = default(System.Guid);
					}
					this.SendPropertyChanged("TaxonomyInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SkuInfo", Storage="_User", ThisKey="CreatedBy", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.SkuInfos.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.SkuInfos.Add(this);
						this._CreatedBy = value.ID;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sku_SkuInfo", Storage="_Sku", ThisKey="SkuID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Sku Sku
		{
			get
			{
				return this._Sku.Entity;
			}
			set
			{
				Sku previousValue = this._Sku.Entity;
				if (((previousValue != value) 
							|| (this._Sku.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sku.Entity = null;
						previousValue.SkuInfos.Remove(this);
					}
					this._Sku.Entity = value;
					if ((value != null))
					{
						value.SkuInfos.Add(this);
						this._SkuID = value.ID;
					}
					else
					{
						this._SkuID = default(System.Guid);
					}
					this.SendPropertyChanged("Sku");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Remark_SkuInfo", Storage="_Remark", ThisKey="CreatedRemark", OtherKey="ID", IsForeignKey=true)]
		public Remark Remark
		{
			get
			{
				return this._Remark.Entity;
			}
			set
			{
				Remark previousValue = this._Remark.Entity;
				if (((previousValue != value) 
							|| (this._Remark.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Remark.Entity = null;
						previousValue.SkuInfos.Remove(this);
					}
					this._Remark.Entity = value;
					if ((value != null))
					{
						value.SkuInfos.Add(this);
						this._CreatedRemark = value.ID;
					}
					else
					{
						this._CreatedRemark = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Remark");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SkuLink")]
	public partial class SkuLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _FromSku;
		
		private System.Guid _ToSku;
		
		private string _LinkType;
		
		private System.DateTime _CreatedOn;
		
		private System.Guid _CreatedBy;
		
		private bool _Active;
		
		private System.Nullable<System.DateTime> _DeletedOn;
		
		private System.Nullable<System.Guid> _DeletedBy;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
		private EntityRef<Sku> _Sku;
		
		private EntityRef<Sku> _Sku1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnFromSkuChanging(System.Guid value);
    partial void OnFromSkuChanged();
    partial void OnToSkuChanging(System.Guid value);
    partial void OnToSkuChanged();
    partial void OnLinkTypeChanging(string value);
    partial void OnLinkTypeChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDeletedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedOnChanged();
    partial void OnDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnDeletedByChanged();
    #endregion
		
		public SkuLink()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			this._Sku = default(EntityRef<Sku>);
			this._Sku1 = default(EntityRef<Sku>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromSku", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FromSku
		{
			get
			{
				return this._FromSku;
			}
			set
			{
				if ((this._FromSku != value))
				{
					if (this._Sku.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFromSkuChanging(value);
					this.SendPropertyChanging();
					this._FromSku = value;
					this.SendPropertyChanged("FromSku");
					this.OnFromSkuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToSku", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ToSku
		{
			get
			{
				return this._ToSku;
			}
			set
			{
				if ((this._ToSku != value))
				{
					if (this._Sku1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToSkuChanging(value);
					this.SendPropertyChanging();
					this._ToSku = value;
					this.SendPropertyChanged("ToSku");
					this.OnToSkuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkType", DbType="VarChar(50)")]
		public string LinkType
		{
			get
			{
				return this._LinkType;
			}
			set
			{
				if ((this._LinkType != value))
				{
					this.OnLinkTypeChanging(value);
					this.SendPropertyChanging();
					this._LinkType = value;
					this.SendPropertyChanged("LinkType");
					this.OnLinkTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedOn
		{
			get
			{
				return this._DeletedOn;
			}
			set
			{
				if ((this._DeletedOn != value))
				{
					this.OnDeletedOnChanging(value);
					this.SendPropertyChanging();
					this._DeletedOn = value;
					this.SendPropertyChanged("DeletedOn");
					this.OnDeletedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DeletedBy
		{
			get
			{
				return this._DeletedBy;
			}
			set
			{
				if ((this._DeletedBy != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeletedByChanging(value);
					this.SendPropertyChanging();
					this._DeletedBy = value;
					this.SendPropertyChanged("DeletedBy");
					this.OnDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SkuLink", Storage="_User", ThisKey="CreatedBy", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.SkuLinks.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.SkuLinks.Add(this);
						this._CreatedBy = value.ID;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SkuLink1", Storage="_User1", ThisKey="DeletedBy", OtherKey="ID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.SkuLinks1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.SkuLinks1.Add(this);
						this._DeletedBy = value.ID;
					}
					else
					{
						this._DeletedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sku_SkuLink", Storage="_Sku", ThisKey="FromSku", OtherKey="ID", IsForeignKey=true)]
		public Sku Sku
		{
			get
			{
				return this._Sku.Entity;
			}
			set
			{
				Sku previousValue = this._Sku.Entity;
				if (((previousValue != value) 
							|| (this._Sku.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sku.Entity = null;
						previousValue.SkuLinks.Remove(this);
					}
					this._Sku.Entity = value;
					if ((value != null))
					{
						value.SkuLinks.Add(this);
						this._FromSku = value.ID;
					}
					else
					{
						this._FromSku = default(System.Guid);
					}
					this.SendPropertyChanged("Sku");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sku_SkuLink1", Storage="_Sku1", ThisKey="ToSku", OtherKey="ID", IsForeignKey=true)]
		public Sku Sku1
		{
			get
			{
				return this._Sku1.Entity;
			}
			set
			{
				Sku previousValue = this._Sku1.Entity;
				if (((previousValue != value) 
							|| (this._Sku1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sku1.Entity = null;
						previousValue.SkuLinks1.Remove(this);
					}
					this._Sku1.Entity = value;
					if ((value != null))
					{
						value.SkuLinks1.Add(this);
						this._ToSku = value.ID;
					}
					else
					{
						this._ToSku = default(System.Guid);
					}
					this.SendPropertyChanged("Sku1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaxonomyInfo")]
	public partial class TaxonomyInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _ProjectID;
		
		private bool _ShowInTree;
		
		private string _NodeType;
		
		private EntitySet<DerivedAttribute> _DerivedAttributes;
		
		private EntitySet<DerivedTaxonomy> _DerivedTaxonomies;
		
		private EntitySet<SchemaInfo> _SchemaInfos;
		
		private EntitySet<SkuInfo> _SkuInfos;
		
		private EntitySet<TaxonomyData> _TaxonomyDatas;
		
		private EntitySet<TaxonomyData> _TaxonomyDatas1;
		
		private EntitySet<TaxonomyMetaInfo> _TaxonomyMetaInfos;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnProjectIDChanging(System.Guid value);
    partial void OnProjectIDChanged();
    partial void OnShowInTreeChanging(bool value);
    partial void OnShowInTreeChanged();
    partial void OnNodeTypeChanging(string value);
    partial void OnNodeTypeChanged();
    #endregion
		
		public TaxonomyInfo()
		{
			this._DerivedAttributes = new EntitySet<DerivedAttribute>(new Action<DerivedAttribute>(this.attach_DerivedAttributes), new Action<DerivedAttribute>(this.detach_DerivedAttributes));
			this._DerivedTaxonomies = new EntitySet<DerivedTaxonomy>(new Action<DerivedTaxonomy>(this.attach_DerivedTaxonomies), new Action<DerivedTaxonomy>(this.detach_DerivedTaxonomies));
			this._SchemaInfos = new EntitySet<SchemaInfo>(new Action<SchemaInfo>(this.attach_SchemaInfos), new Action<SchemaInfo>(this.detach_SchemaInfos));
			this._SkuInfos = new EntitySet<SkuInfo>(new Action<SkuInfo>(this.attach_SkuInfos), new Action<SkuInfo>(this.detach_SkuInfos));
			this._TaxonomyDatas = new EntitySet<TaxonomyData>(new Action<TaxonomyData>(this.attach_TaxonomyDatas), new Action<TaxonomyData>(this.detach_TaxonomyDatas));
			this._TaxonomyDatas1 = new EntitySet<TaxonomyData>(new Action<TaxonomyData>(this.attach_TaxonomyDatas1), new Action<TaxonomyData>(this.detach_TaxonomyDatas1));
			this._TaxonomyMetaInfos = new EntitySet<TaxonomyMetaInfo>(new Action<TaxonomyMetaInfo>(this.attach_TaxonomyMetaInfos), new Action<TaxonomyMetaInfo>(this.detach_TaxonomyMetaInfos));
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowInTree", DbType="Bit NOT NULL")]
		public bool ShowInTree
		{
			get
			{
				return this._ShowInTree;
			}
			set
			{
				if ((this._ShowInTree != value))
				{
					this.OnShowInTreeChanging(value);
					this.SendPropertyChanging();
					this._ShowInTree = value;
					this.SendPropertyChanged("ShowInTree");
					this.OnShowInTreeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeType", DbType="NVarChar(50)", CanBeNull=false)]
		public string NodeType
		{
			get
			{
				return this._NodeType;
			}
			set
			{
				if ((this._NodeType != value))
				{
					this.OnNodeTypeChanging(value);
					this.SendPropertyChanging();
					this._NodeType = value;
					this.SendPropertyChanged("NodeType");
					this.OnNodeTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaxonomyInfo_DerivedAttribute", Storage="_DerivedAttributes", ThisKey="ID", OtherKey="TaxonomyID")]
		public EntitySet<DerivedAttribute> DerivedAttributes
		{
			get
			{
				return this._DerivedAttributes;
			}
			set
			{
				this._DerivedAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaxonomyInfo_DerivedTaxonomy", Storage="_DerivedTaxonomies", ThisKey="ID", OtherKey="TaxonomyID")]
		public EntitySet<DerivedTaxonomy> DerivedTaxonomies
		{
			get
			{
				return this._DerivedTaxonomies;
			}
			set
			{
				this._DerivedTaxonomies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaxonomyInfo_SchemaInfo", Storage="_SchemaInfos", ThisKey="ID", OtherKey="TaxonomyID")]
		public EntitySet<SchemaInfo> SchemaInfos
		{
			get
			{
				return this._SchemaInfos;
			}
			set
			{
				this._SchemaInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaxonomyInfo_SkuInfo", Storage="_SkuInfos", ThisKey="ID", OtherKey="TaxonomyID")]
		public EntitySet<SkuInfo> SkuInfos
		{
			get
			{
				return this._SkuInfos;
			}
			set
			{
				this._SkuInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaxonomyInfo_TaxonomyData", Storage="_TaxonomyDatas", ThisKey="ID", OtherKey="TaxonomyID")]
		public EntitySet<TaxonomyData> TaxonomyDatas
		{
			get
			{
				return this._TaxonomyDatas;
			}
			set
			{
				this._TaxonomyDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaxonomyInfo_TaxonomyData1", Storage="_TaxonomyDatas1", ThisKey="ID", OtherKey="ParentTaxonomyID")]
		public EntitySet<TaxonomyData> TaxonomyDatas1
		{
			get
			{
				return this._TaxonomyDatas1;
			}
			set
			{
				this._TaxonomyDatas1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaxonomyInfo_TaxonomyMetaInfo", Storage="_TaxonomyMetaInfos", ThisKey="ID", OtherKey="TaxonomyID")]
		public EntitySet<TaxonomyMetaInfo> TaxonomyMetaInfos
		{
			get
			{
				return this._TaxonomyMetaInfos;
			}
			set
			{
				this._TaxonomyMetaInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_TaxonomyInfo", Storage="_Project", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.TaxonomyInfos.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.TaxonomyInfos.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(System.Guid);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DerivedAttributes(DerivedAttribute entity)
		{
			this.SendPropertyChanging();
			entity.TaxonomyInfo = this;
		}
		
		private void detach_DerivedAttributes(DerivedAttribute entity)
		{
			this.SendPropertyChanging();
			entity.TaxonomyInfo = null;
		}
		
		private void attach_DerivedTaxonomies(DerivedTaxonomy entity)
		{
			this.SendPropertyChanging();
			entity.TaxonomyInfo = this;
		}
		
		private void detach_DerivedTaxonomies(DerivedTaxonomy entity)
		{
			this.SendPropertyChanging();
			entity.TaxonomyInfo = null;
		}
		
		private void attach_SchemaInfos(SchemaInfo entity)
		{
			this.SendPropertyChanging();
			entity.TaxonomyInfo = this;
		}
		
		private void detach_SchemaInfos(SchemaInfo entity)
		{
			this.SendPropertyChanging();
			entity.TaxonomyInfo = null;
		}
		
		private void attach_SkuInfos(SkuInfo entity)
		{
			this.SendPropertyChanging();
			entity.TaxonomyInfo = this;
		}
		
		private void detach_SkuInfos(SkuInfo entity)
		{
			this.SendPropertyChanging();
			entity.TaxonomyInfo = null;
		}
		
		private void attach_TaxonomyDatas(TaxonomyData entity)
		{
			this.SendPropertyChanging();
			entity.TaxonomyInfo = this;
		}
		
		private void detach_TaxonomyDatas(TaxonomyData entity)
		{
			this.SendPropertyChanging();
			entity.TaxonomyInfo = null;
		}
		
		private void attach_TaxonomyDatas1(TaxonomyData entity)
		{
			this.SendPropertyChanging();
			entity.TaxonomyInfo1 = this;
		}
		
		private void detach_TaxonomyDatas1(TaxonomyData entity)
		{
			this.SendPropertyChanging();
			entity.TaxonomyInfo1 = null;
		}
		
		private void attach_TaxonomyMetaInfos(TaxonomyMetaInfo entity)
		{
			this.SendPropertyChanging();
			entity.TaxonomyInfo = this;
		}
		
		private void detach_TaxonomyMetaInfos(TaxonomyMetaInfo entity)
		{
			this.SendPropertyChanging();
			entity.TaxonomyInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UIObject")]
	public partial class UIObject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public UIObject()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Checkpoint]")]
	public partial class Checkpoint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.DateTime _Timestamp;
		
		private System.Guid _ProjectID;
		
		private string _Title;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnProjectIDChanging(System.Guid value);
    partial void OnProjectIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Checkpoint()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SkuGroup")]
	public partial class SkuGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _GroupID;
		
		private System.Guid _SkuID;
		
		private bool _Active;
		
		private EntityRef<Sku> _Sku;
		
		private EntityRef<Group> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnGroupIDChanging(System.Guid value);
    partial void OnGroupIDChanged();
    partial void OnSkuIDChanging(System.Guid value);
    partial void OnSkuIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public SkuGroup()
		{
			this._Sku = default(EntityRef<Sku>);
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkuID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SkuID
		{
			get
			{
				return this._SkuID;
			}
			set
			{
				if ((this._SkuID != value))
				{
					if (this._Sku.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSkuIDChanging(value);
					this.SendPropertyChanging();
					this._SkuID = value;
					this.SendPropertyChanged("SkuID");
					this.OnSkuIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sku_SkuGroup", Storage="_Sku", ThisKey="SkuID", OtherKey="ID", IsForeignKey=true)]
		public Sku Sku
		{
			get
			{
				return this._Sku.Entity;
			}
			set
			{
				Sku previousValue = this._Sku.Entity;
				if (((previousValue != value) 
							|| (this._Sku.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sku.Entity = null;
						previousValue.SkuGroups.Remove(this);
					}
					this._Sku.Entity = value;
					if ((value != null))
					{
						value.SkuGroups.Add(this);
						this._SkuID = value.ID;
					}
					else
					{
						this._SkuID = default(System.Guid);
					}
					this.SendPropertyChanged("Sku");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_SkuGroup", Storage="_Group", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.SkuGroups.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.SkuGroups.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(System.Guid);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupNotes")]
	public partial class GroupNote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _GroupID;
		
		private string _Comment;
		
		private System.DateTime _CreatedOn;
		
		private System.Guid _CreatedBy;
		
		private EntityRef<User> _User;
		
		private EntityRef<Group> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnGroupIDChanging(System.Guid value);
    partial void OnGroupIDChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    #endregion
		
		public GroupNote()
		{
			this._User = default(EntityRef<User>);
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_GroupNote", Storage="_User", ThisKey="CreatedBy", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.GroupNotes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.GroupNotes.Add(this);
						this._CreatedBy = value.ID;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_GroupNote", Storage="_Group", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.GroupNotes.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.GroupNotes.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(System.Guid);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ListOfValues")]
	public partial class ListOfValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _SchemaID;
		
		private string _Value;
		
		private string _ParentValue;
		
		private System.DateTime _CreatedOn;
		
		private System.Guid _CreatedBy;
		
		private System.Nullable<System.DateTime> _DeletedOn;
		
		private System.Nullable<System.Guid> _DeletedBy;
		
		private bool _Active;
		
		private System.Nullable<int> _DisplayOrder;
		
		private string _EnrichmentImage;
		
		private string _EnrichmentCopy;
		
		private EntityRef<SchemaInfo> _SchemaInfo;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnSchemaIDChanging(System.Guid value);
    partial void OnSchemaIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnParentValueChanging(string value);
    partial void OnParentValueChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnDeletedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedOnChanged();
    partial void OnDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnDeletedByChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDisplayOrderChanging(System.Nullable<int> value);
    partial void OnDisplayOrderChanged();
    partial void OnEnrichmentImageChanging(string value);
    partial void OnEnrichmentImageChanged();
    partial void OnEnrichmentCopyChanging(string value);
    partial void OnEnrichmentCopyChanged();
    #endregion
		
		public ListOfValue()
		{
			this._SchemaInfo = default(EntityRef<SchemaInfo>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchemaID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchemaID
		{
			get
			{
				return this._SchemaID;
			}
			set
			{
				if ((this._SchemaID != value))
				{
					if (this._SchemaInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchemaIDChanging(value);
					this.SendPropertyChanging();
					this._SchemaID = value;
					this.SendPropertyChanged("SchemaID");
					this.OnSchemaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(4000)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentValue", DbType="NVarChar(4000)")]
		public string ParentValue
		{
			get
			{
				return this._ParentValue;
			}
			set
			{
				if ((this._ParentValue != value))
				{
					this.OnParentValueChanging(value);
					this.SendPropertyChanging();
					this._ParentValue = value;
					this.SendPropertyChanged("ParentValue");
					this.OnParentValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedOn
		{
			get
			{
				return this._DeletedOn;
			}
			set
			{
				if ((this._DeletedOn != value))
				{
					this.OnDeletedOnChanging(value);
					this.SendPropertyChanging();
					this._DeletedOn = value;
					this.SendPropertyChanged("DeletedOn");
					this.OnDeletedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DeletedBy
		{
			get
			{
				return this._DeletedBy;
			}
			set
			{
				if ((this._DeletedBy != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeletedByChanging(value);
					this.SendPropertyChanging();
					this._DeletedBy = value;
					this.SendPropertyChanged("DeletedBy");
					this.OnDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayOrder", DbType="Int")]
		public System.Nullable<int> DisplayOrder
		{
			get
			{
				return this._DisplayOrder;
			}
			set
			{
				if ((this._DisplayOrder != value))
				{
					this.OnDisplayOrderChanging(value);
					this.SendPropertyChanging();
					this._DisplayOrder = value;
					this.SendPropertyChanged("DisplayOrder");
					this.OnDisplayOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnrichmentImage", DbType="NVarChar(4000)")]
		public string EnrichmentImage
		{
			get
			{
				return this._EnrichmentImage;
			}
			set
			{
				if ((this._EnrichmentImage != value))
				{
					this.OnEnrichmentImageChanging(value);
					this.SendPropertyChanging();
					this._EnrichmentImage = value;
					this.SendPropertyChanged("EnrichmentImage");
					this.OnEnrichmentImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnrichmentCopy", DbType="NVarChar(4000)")]
		public string EnrichmentCopy
		{
			get
			{
				return this._EnrichmentCopy;
			}
			set
			{
				if ((this._EnrichmentCopy != value))
				{
					this.OnEnrichmentCopyChanging(value);
					this.SendPropertyChanging();
					this._EnrichmentCopy = value;
					this.SendPropertyChanged("EnrichmentCopy");
					this.OnEnrichmentCopyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchemaInfo_ListOfValue", Storage="_SchemaInfo", ThisKey="SchemaID", OtherKey="ID", IsForeignKey=true)]
		public SchemaInfo SchemaInfo
		{
			get
			{
				return this._SchemaInfo.Entity;
			}
			set
			{
				SchemaInfo previousValue = this._SchemaInfo.Entity;
				if (((previousValue != value) 
							|| (this._SchemaInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchemaInfo.Entity = null;
						previousValue.ListOfValues.Remove(this);
					}
					this._SchemaInfo.Entity = value;
					if ((value != null))
					{
						value.ListOfValues.Add(this);
						this._SchemaID = value.ID;
					}
					else
					{
						this._SchemaID = default(System.Guid);
					}
					this.SendPropertyChanged("SchemaInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ListOfValue", Storage="_User", ThisKey="CreatedBy", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ListOfValues.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ListOfValues.Add(this);
						this._CreatedBy = value.ID;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ListOfValue1", Storage="_User1", ThisKey="DeletedBy", OtherKey="ID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.ListOfValues1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.ListOfValues1.Add(this);
						this._DeletedBy = value.ID;
					}
					else
					{
						this._DeletedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProject")]
	public partial class UserProject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _UserID;
		
		private System.Guid _ProjectID;
		
		private System.Guid _GroupID;
		
		private System.Xml.Linq.XElement _Preferences;
		
		private EntityRef<User> _User;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<Group> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnProjectIDChanging(System.Guid value);
    partial void OnProjectIDChanged();
    partial void OnGroupIDChanging(System.Guid value);
    partial void OnGroupIDChanged();
    partial void OnPreferencesChanging(System.Xml.Linq.XElement value);
    partial void OnPreferencesChanged();
    #endregion
		
		public UserProject()
		{
			this._User = default(EntityRef<User>);
			this._Project = default(EntityRef<Project>);
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Preferences", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Preferences
		{
			get
			{
				return this._Preferences;
			}
			set
			{
				if ((this._Preferences != value))
				{
					this.OnPreferencesChanging(value);
					this.SendPropertyChanging();
					this._Preferences = value;
					this.SendPropertyChanged("Preferences");
					this.OnPreferencesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserProject", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserProjects.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserProjects.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_UserProject", Storage="_Project", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.UserProjects.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.UserProjects.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(System.Guid);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_UserProject", Storage="_Group", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.UserProjects.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.UserProjects.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(System.Guid);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private int _SingleSignOnId;
		
		private bool _IsAdmin;
		
		private System.DateTime _CreatedOn;
		
		private string _FullName;
		
		private string _OpenIdentity;
		
		private string _EmailAddress;
		
		private bool _Active;
		
		private EntitySet<SchemaData> _SchemaDatas;
		
		private EntitySet<SchemaData> _SchemaDatas1;
		
		private EntitySet<SchemaMetaData> _SchemaMetaDatas;
		
		private EntitySet<SchemaMetaData> _SchemaMetaDatas1;
		
		private EntitySet<SkuInfo> _SkuInfos;
		
		private EntitySet<SkuLink> _SkuLinks;
		
		private EntitySet<SkuLink> _SkuLinks1;
		
		private EntitySet<GroupNote> _GroupNotes;
		
		private EntitySet<ListOfValue> _ListOfValues;
		
		private EntitySet<ListOfValue> _ListOfValues1;
		
		private EntitySet<UserProject> _UserProjects;
		
		private EntitySet<Sku> _Skus;
		
		private EntitySet<TaxonomyMetaData> _TaxonomyMetaDatas;
		
		private EntitySet<TaxonomyMetaData> _TaxonomyMetaDatas1;
		
		private EntitySet<TaxonomyData> _TaxonomyDatas;
		
		private EntitySet<TaxonomyData> _TaxonomyDatas1;
		
		private EntitySet<Attribute> _Attributes;
		
		private EntitySet<AttributeMetaData> _AttributeMetaDatas;
		
		private EntitySet<AttributeMetaData> _AttributeMetaDatas1;
		
		private EntitySet<EntityData> _EntityDatas;
		
		private EntitySet<EntityData> _EntityDatas1;
		
		private EntitySet<Group> _Groups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnSingleSignOnIdChanging(int value);
    partial void OnSingleSignOnIdChanged();
    partial void OnIsAdminChanging(bool value);
    partial void OnIsAdminChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnOpenIdentityChanging(string value);
    partial void OnOpenIdentityChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public User()
		{
			this._SchemaDatas = new EntitySet<SchemaData>(new Action<SchemaData>(this.attach_SchemaDatas), new Action<SchemaData>(this.detach_SchemaDatas));
			this._SchemaDatas1 = new EntitySet<SchemaData>(new Action<SchemaData>(this.attach_SchemaDatas1), new Action<SchemaData>(this.detach_SchemaDatas1));
			this._SchemaMetaDatas = new EntitySet<SchemaMetaData>(new Action<SchemaMetaData>(this.attach_SchemaMetaDatas), new Action<SchemaMetaData>(this.detach_SchemaMetaDatas));
			this._SchemaMetaDatas1 = new EntitySet<SchemaMetaData>(new Action<SchemaMetaData>(this.attach_SchemaMetaDatas1), new Action<SchemaMetaData>(this.detach_SchemaMetaDatas1));
			this._SkuInfos = new EntitySet<SkuInfo>(new Action<SkuInfo>(this.attach_SkuInfos), new Action<SkuInfo>(this.detach_SkuInfos));
			this._SkuLinks = new EntitySet<SkuLink>(new Action<SkuLink>(this.attach_SkuLinks), new Action<SkuLink>(this.detach_SkuLinks));
			this._SkuLinks1 = new EntitySet<SkuLink>(new Action<SkuLink>(this.attach_SkuLinks1), new Action<SkuLink>(this.detach_SkuLinks1));
			this._GroupNotes = new EntitySet<GroupNote>(new Action<GroupNote>(this.attach_GroupNotes), new Action<GroupNote>(this.detach_GroupNotes));
			this._ListOfValues = new EntitySet<ListOfValue>(new Action<ListOfValue>(this.attach_ListOfValues), new Action<ListOfValue>(this.detach_ListOfValues));
			this._ListOfValues1 = new EntitySet<ListOfValue>(new Action<ListOfValue>(this.attach_ListOfValues1), new Action<ListOfValue>(this.detach_ListOfValues1));
			this._UserProjects = new EntitySet<UserProject>(new Action<UserProject>(this.attach_UserProjects), new Action<UserProject>(this.detach_UserProjects));
			this._Skus = new EntitySet<Sku>(new Action<Sku>(this.attach_Skus), new Action<Sku>(this.detach_Skus));
			this._TaxonomyMetaDatas = new EntitySet<TaxonomyMetaData>(new Action<TaxonomyMetaData>(this.attach_TaxonomyMetaDatas), new Action<TaxonomyMetaData>(this.detach_TaxonomyMetaDatas));
			this._TaxonomyMetaDatas1 = new EntitySet<TaxonomyMetaData>(new Action<TaxonomyMetaData>(this.attach_TaxonomyMetaDatas1), new Action<TaxonomyMetaData>(this.detach_TaxonomyMetaDatas1));
			this._TaxonomyDatas = new EntitySet<TaxonomyData>(new Action<TaxonomyData>(this.attach_TaxonomyDatas), new Action<TaxonomyData>(this.detach_TaxonomyDatas));
			this._TaxonomyDatas1 = new EntitySet<TaxonomyData>(new Action<TaxonomyData>(this.attach_TaxonomyDatas1), new Action<TaxonomyData>(this.detach_TaxonomyDatas1));
			this._Attributes = new EntitySet<Attribute>(new Action<Attribute>(this.attach_Attributes), new Action<Attribute>(this.detach_Attributes));
			this._AttributeMetaDatas = new EntitySet<AttributeMetaData>(new Action<AttributeMetaData>(this.attach_AttributeMetaDatas), new Action<AttributeMetaData>(this.detach_AttributeMetaDatas));
			this._AttributeMetaDatas1 = new EntitySet<AttributeMetaData>(new Action<AttributeMetaData>(this.attach_AttributeMetaDatas1), new Action<AttributeMetaData>(this.detach_AttributeMetaDatas1));
			this._EntityDatas = new EntitySet<EntityData>(new Action<EntityData>(this.attach_EntityDatas), new Action<EntityData>(this.detach_EntityDatas));
			this._EntityDatas1 = new EntitySet<EntityData>(new Action<EntityData>(this.attach_EntityDatas1), new Action<EntityData>(this.detach_EntityDatas1));
			this._Groups = new EntitySet<Group>(new Action<Group>(this.attach_Groups), new Action<Group>(this.detach_Groups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SingleSignOnId", DbType="Int NOT NULL")]
		public int SingleSignOnId
		{
			get
			{
				return this._SingleSignOnId;
			}
			set
			{
				if ((this._SingleSignOnId != value))
				{
					this.OnSingleSignOnIdChanging(value);
					this.SendPropertyChanging();
					this._SingleSignOnId = value;
					this.SendPropertyChanged("SingleSignOnId");
					this.OnSingleSignOnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAdmin", DbType="Bit NOT NULL")]
		public bool IsAdmin
		{
			get
			{
				return this._IsAdmin;
			}
			set
			{
				if ((this._IsAdmin != value))
				{
					this.OnIsAdminChanging(value);
					this.SendPropertyChanging();
					this._IsAdmin = value;
					this.SendPropertyChanged("IsAdmin");
					this.OnIsAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(255)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpenIdentity", DbType="NVarChar(255)")]
		public string OpenIdentity
		{
			get
			{
				return this._OpenIdentity;
			}
			set
			{
				if ((this._OpenIdentity != value))
				{
					this.OnOpenIdentityChanging(value);
					this.SendPropertyChanging();
					this._OpenIdentity = value;
					this.SendPropertyChanged("OpenIdentity");
					this.OnOpenIdentityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="NVarChar(255)")]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SchemaData", Storage="_SchemaDatas", ThisKey="ID", OtherKey="CreatedBy")]
		public EntitySet<SchemaData> SchemaDatas
		{
			get
			{
				return this._SchemaDatas;
			}
			set
			{
				this._SchemaDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SchemaData1", Storage="_SchemaDatas1", ThisKey="ID", OtherKey="DeletedBy")]
		public EntitySet<SchemaData> SchemaDatas1
		{
			get
			{
				return this._SchemaDatas1;
			}
			set
			{
				this._SchemaDatas1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SchemaMetaData", Storage="_SchemaMetaDatas", ThisKey="ID", OtherKey="CreatedBy")]
		public EntitySet<SchemaMetaData> SchemaMetaDatas
		{
			get
			{
				return this._SchemaMetaDatas;
			}
			set
			{
				this._SchemaMetaDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SchemaMetaData1", Storage="_SchemaMetaDatas1", ThisKey="ID", OtherKey="DeletedBy")]
		public EntitySet<SchemaMetaData> SchemaMetaDatas1
		{
			get
			{
				return this._SchemaMetaDatas1;
			}
			set
			{
				this._SchemaMetaDatas1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SkuInfo", Storage="_SkuInfos", ThisKey="ID", OtherKey="CreatedBy")]
		public EntitySet<SkuInfo> SkuInfos
		{
			get
			{
				return this._SkuInfos;
			}
			set
			{
				this._SkuInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SkuLink", Storage="_SkuLinks", ThisKey="ID", OtherKey="CreatedBy")]
		public EntitySet<SkuLink> SkuLinks
		{
			get
			{
				return this._SkuLinks;
			}
			set
			{
				this._SkuLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SkuLink1", Storage="_SkuLinks1", ThisKey="ID", OtherKey="DeletedBy")]
		public EntitySet<SkuLink> SkuLinks1
		{
			get
			{
				return this._SkuLinks1;
			}
			set
			{
				this._SkuLinks1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_GroupNote", Storage="_GroupNotes", ThisKey="ID", OtherKey="CreatedBy")]
		public EntitySet<GroupNote> GroupNotes
		{
			get
			{
				return this._GroupNotes;
			}
			set
			{
				this._GroupNotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ListOfValue", Storage="_ListOfValues", ThisKey="ID", OtherKey="CreatedBy")]
		public EntitySet<ListOfValue> ListOfValues
		{
			get
			{
				return this._ListOfValues;
			}
			set
			{
				this._ListOfValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ListOfValue1", Storage="_ListOfValues1", ThisKey="ID", OtherKey="DeletedBy")]
		public EntitySet<ListOfValue> ListOfValues1
		{
			get
			{
				return this._ListOfValues1;
			}
			set
			{
				this._ListOfValues1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserProject", Storage="_UserProjects", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UserProject> UserProjects
		{
			get
			{
				return this._UserProjects;
			}
			set
			{
				this._UserProjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Sku", Storage="_Skus", ThisKey="ID", OtherKey="CreatedBy")]
		public EntitySet<Sku> Skus
		{
			get
			{
				return this._Skus;
			}
			set
			{
				this._Skus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TaxonomyMetaData", Storage="_TaxonomyMetaDatas", ThisKey="ID", OtherKey="CreatedBy")]
		public EntitySet<TaxonomyMetaData> TaxonomyMetaDatas
		{
			get
			{
				return this._TaxonomyMetaDatas;
			}
			set
			{
				this._TaxonomyMetaDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TaxonomyMetaData1", Storage="_TaxonomyMetaDatas1", ThisKey="ID", OtherKey="DeletedBy")]
		public EntitySet<TaxonomyMetaData> TaxonomyMetaDatas1
		{
			get
			{
				return this._TaxonomyMetaDatas1;
			}
			set
			{
				this._TaxonomyMetaDatas1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TaxonomyData", Storage="_TaxonomyDatas", ThisKey="ID", OtherKey="CreatedBy")]
		public EntitySet<TaxonomyData> TaxonomyDatas
		{
			get
			{
				return this._TaxonomyDatas;
			}
			set
			{
				this._TaxonomyDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TaxonomyData1", Storage="_TaxonomyDatas1", ThisKey="ID", OtherKey="DeletedBy")]
		public EntitySet<TaxonomyData> TaxonomyDatas1
		{
			get
			{
				return this._TaxonomyDatas1;
			}
			set
			{
				this._TaxonomyDatas1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Attribute", Storage="_Attributes", ThisKey="ID", OtherKey="CreatedBy")]
		public EntitySet<Attribute> Attributes
		{
			get
			{
				return this._Attributes;
			}
			set
			{
				this._Attributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AttributeMetaData", Storage="_AttributeMetaDatas", ThisKey="ID", OtherKey="CreatedBy")]
		public EntitySet<AttributeMetaData> AttributeMetaDatas
		{
			get
			{
				return this._AttributeMetaDatas;
			}
			set
			{
				this._AttributeMetaDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AttributeMetaData1", Storage="_AttributeMetaDatas1", ThisKey="ID", OtherKey="DeletedBy")]
		public EntitySet<AttributeMetaData> AttributeMetaDatas1
		{
			get
			{
				return this._AttributeMetaDatas1;
			}
			set
			{
				this._AttributeMetaDatas1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_EntityData", Storage="_EntityDatas", ThisKey="ID", OtherKey="CreatedBy")]
		public EntitySet<EntityData> EntityDatas
		{
			get
			{
				return this._EntityDatas;
			}
			set
			{
				this._EntityDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_EntityData1", Storage="_EntityDatas1", ThisKey="ID", OtherKey="DeletedBy")]
		public EntitySet<EntityData> EntityDatas1
		{
			get
			{
				return this._EntityDatas1;
			}
			set
			{
				this._EntityDatas1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Group", Storage="_Groups", ThisKey="ID", OtherKey="CreatedBy")]
		public EntitySet<Group> Groups
		{
			get
			{
				return this._Groups;
			}
			set
			{
				this._Groups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SchemaDatas(SchemaData entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_SchemaDatas(SchemaData entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_SchemaDatas1(SchemaData entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_SchemaDatas1(SchemaData entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_SchemaMetaDatas(SchemaMetaData entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_SchemaMetaDatas(SchemaMetaData entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_SchemaMetaDatas1(SchemaMetaData entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_SchemaMetaDatas1(SchemaMetaData entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_SkuInfos(SkuInfo entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_SkuInfos(SkuInfo entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_SkuLinks(SkuLink entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_SkuLinks(SkuLink entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_SkuLinks1(SkuLink entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_SkuLinks1(SkuLink entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_GroupNotes(GroupNote entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_GroupNotes(GroupNote entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ListOfValues(ListOfValue entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ListOfValues(ListOfValue entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ListOfValues1(ListOfValue entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_ListOfValues1(ListOfValue entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_UserProjects(UserProject entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserProjects(UserProject entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Skus(Sku entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Skus(Sku entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_TaxonomyMetaDatas(TaxonomyMetaData entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_TaxonomyMetaDatas(TaxonomyMetaData entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_TaxonomyMetaDatas1(TaxonomyMetaData entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_TaxonomyMetaDatas1(TaxonomyMetaData entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_TaxonomyDatas(TaxonomyData entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_TaxonomyDatas(TaxonomyData entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_TaxonomyDatas1(TaxonomyData entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_TaxonomyDatas1(TaxonomyData entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_Attributes(Attribute entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Attributes(Attribute entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_AttributeMetaDatas(AttributeMetaData entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_AttributeMetaDatas(AttributeMetaData entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_AttributeMetaDatas1(AttributeMetaData entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_AttributeMetaDatas1(AttributeMetaData entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_EntityDatas(EntityData entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_EntityDatas(EntityData entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_EntityDatas1(EntityData entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_EntityDatas1(EntityData entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_Groups(Group entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Groups(Group entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sku")]
	public partial class Sku : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _ItemID;
		
		private System.Guid _ProjectID;
		
		private string _SkuType;
		
		private System.DateTime _CreatedOn;
		
		private System.Guid _CreatedBy;
		
		private EntitySet<EntityInfo> _EntityInfos;
		
		private EntitySet<SkuInfo> _SkuInfos;
		
		private EntitySet<SkuLink> _SkuLinks;
		
		private EntitySet<SkuLink> _SkuLinks1;
		
		private EntitySet<SkuGroup> _SkuGroups;
		
		private EntitySet<DerivedEntityData> _DerivedEntityDatas;
		
		private EntityRef<User> _User;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnItemIDChanging(string value);
    partial void OnItemIDChanged();
    partial void OnProjectIDChanging(System.Guid value);
    partial void OnProjectIDChanged();
    partial void OnSkuTypeChanging(string value);
    partial void OnSkuTypeChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    #endregion
		
		public Sku()
		{
			this._EntityInfos = new EntitySet<EntityInfo>(new Action<EntityInfo>(this.attach_EntityInfos), new Action<EntityInfo>(this.detach_EntityInfos));
			this._SkuInfos = new EntitySet<SkuInfo>(new Action<SkuInfo>(this.attach_SkuInfos), new Action<SkuInfo>(this.detach_SkuInfos));
			this._SkuLinks = new EntitySet<SkuLink>(new Action<SkuLink>(this.attach_SkuLinks), new Action<SkuLink>(this.detach_SkuLinks));
			this._SkuLinks1 = new EntitySet<SkuLink>(new Action<SkuLink>(this.attach_SkuLinks1), new Action<SkuLink>(this.detach_SkuLinks1));
			this._SkuGroups = new EntitySet<SkuGroup>(new Action<SkuGroup>(this.attach_SkuGroups), new Action<SkuGroup>(this.detach_SkuGroups));
			this._DerivedEntityDatas = new EntitySet<DerivedEntityData>(new Action<DerivedEntityData>(this.attach_DerivedEntityDatas), new Action<DerivedEntityData>(this.detach_DerivedEntityDatas));
			this._User = default(EntityRef<User>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkuType", DbType="VarChar(255)")]
		public string SkuType
		{
			get
			{
				return this._SkuType;
			}
			set
			{
				if ((this._SkuType != value))
				{
					this.OnSkuTypeChanging(value);
					this.SendPropertyChanging();
					this._SkuType = value;
					this.SendPropertyChanged("SkuType");
					this.OnSkuTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sku_EntityInfo", Storage="_EntityInfos", ThisKey="ID", OtherKey="SkuID")]
		public EntitySet<EntityInfo> EntityInfos
		{
			get
			{
				return this._EntityInfos;
			}
			set
			{
				this._EntityInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sku_SkuInfo", Storage="_SkuInfos", ThisKey="ID", OtherKey="SkuID")]
		public EntitySet<SkuInfo> SkuInfos
		{
			get
			{
				return this._SkuInfos;
			}
			set
			{
				this._SkuInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sku_SkuLink", Storage="_SkuLinks", ThisKey="ID", OtherKey="FromSku")]
		public EntitySet<SkuLink> SkuLinks
		{
			get
			{
				return this._SkuLinks;
			}
			set
			{
				this._SkuLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sku_SkuLink1", Storage="_SkuLinks1", ThisKey="ID", OtherKey="ToSku")]
		public EntitySet<SkuLink> SkuLinks1
		{
			get
			{
				return this._SkuLinks1;
			}
			set
			{
				this._SkuLinks1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sku_SkuGroup", Storage="_SkuGroups", ThisKey="ID", OtherKey="SkuID")]
		public EntitySet<SkuGroup> SkuGroups
		{
			get
			{
				return this._SkuGroups;
			}
			set
			{
				this._SkuGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sku_DerivedEntityData", Storage="_DerivedEntityDatas", ThisKey="ID", OtherKey="SkuID")]
		public EntitySet<DerivedEntityData> DerivedEntityDatas
		{
			get
			{
				return this._DerivedEntityDatas;
			}
			set
			{
				this._DerivedEntityDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Sku", Storage="_User", ThisKey="CreatedBy", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Skus.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Skus.Add(this);
						this._CreatedBy = value.ID;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Sku", Storage="_Project", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Skus.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Skus.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(System.Guid);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EntityInfos(EntityInfo entity)
		{
			this.SendPropertyChanging();
			entity.Sku = this;
		}
		
		private void detach_EntityInfos(EntityInfo entity)
		{
			this.SendPropertyChanging();
			entity.Sku = null;
		}
		
		private void attach_SkuInfos(SkuInfo entity)
		{
			this.SendPropertyChanging();
			entity.Sku = this;
		}
		
		private void detach_SkuInfos(SkuInfo entity)
		{
			this.SendPropertyChanging();
			entity.Sku = null;
		}
		
		private void attach_SkuLinks(SkuLink entity)
		{
			this.SendPropertyChanging();
			entity.Sku = this;
		}
		
		private void detach_SkuLinks(SkuLink entity)
		{
			this.SendPropertyChanging();
			entity.Sku = null;
		}
		
		private void attach_SkuLinks1(SkuLink entity)
		{
			this.SendPropertyChanging();
			entity.Sku1 = this;
		}
		
		private void detach_SkuLinks1(SkuLink entity)
		{
			this.SendPropertyChanging();
			entity.Sku1 = null;
		}
		
		private void attach_SkuGroups(SkuGroup entity)
		{
			this.SendPropertyChanging();
			entity.Sku = this;
		}
		
		private void detach_SkuGroups(SkuGroup entity)
		{
			this.SendPropertyChanging();
			entity.Sku = null;
		}
		
		private void attach_DerivedEntityDatas(DerivedEntityData entity)
		{
			this.SendPropertyChanging();
			entity.Sku = this;
		}
		
		private void detach_DerivedEntityDatas(DerivedEntityData entity)
		{
			this.SendPropertyChanging();
			entity.Sku = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaxonomyMetaData")]
	public partial class TaxonomyMetaData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _MetaID;
		
		private string _Value;
		
		private System.DateTime _CreatedOn;
		
		private System.Guid _CreatedBy;
		
		private System.Nullable<System.Guid> _CreatedRemark;
		
		private System.Nullable<System.DateTime> _DeletedOn;
		
		private System.Nullable<System.Guid> _DeletedBy;
		
		private System.Nullable<System.Guid> _DeletedRemark;
		
		private bool _Active;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
		private EntityRef<Remark> _Remark;
		
		private EntityRef<Remark> _Remark1;
		
		private EntityRef<TaxonomyMetaInfo> _TaxonomyMetaInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnMetaIDChanging(System.Guid value);
    partial void OnMetaIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnCreatedRemarkChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedRemarkChanged();
    partial void OnDeletedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedOnChanged();
    partial void OnDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnDeletedByChanged();
    partial void OnDeletedRemarkChanging(System.Nullable<System.Guid> value);
    partial void OnDeletedRemarkChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public TaxonomyMetaData()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			this._Remark = default(EntityRef<Remark>);
			this._Remark1 = default(EntityRef<Remark>);
			this._TaxonomyMetaInfo = default(EntityRef<TaxonomyMetaInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetaID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid MetaID
		{
			get
			{
				return this._MetaID;
			}
			set
			{
				if ((this._MetaID != value))
				{
					if (this._TaxonomyMetaInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetaIDChanging(value);
					this.SendPropertyChanging();
					this._MetaID = value;
					this.SendPropertyChanged("MetaID");
					this.OnMetaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedRemark", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedRemark
		{
			get
			{
				return this._CreatedRemark;
			}
			set
			{
				if ((this._CreatedRemark != value))
				{
					if (this._Remark.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedRemarkChanging(value);
					this.SendPropertyChanging();
					this._CreatedRemark = value;
					this.SendPropertyChanged("CreatedRemark");
					this.OnCreatedRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedOn
		{
			get
			{
				return this._DeletedOn;
			}
			set
			{
				if ((this._DeletedOn != value))
				{
					this.OnDeletedOnChanging(value);
					this.SendPropertyChanging();
					this._DeletedOn = value;
					this.SendPropertyChanged("DeletedOn");
					this.OnDeletedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DeletedBy
		{
			get
			{
				return this._DeletedBy;
			}
			set
			{
				if ((this._DeletedBy != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeletedByChanging(value);
					this.SendPropertyChanging();
					this._DeletedBy = value;
					this.SendPropertyChanged("DeletedBy");
					this.OnDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedRemark", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DeletedRemark
		{
			get
			{
				return this._DeletedRemark;
			}
			set
			{
				if ((this._DeletedRemark != value))
				{
					if (this._Remark1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeletedRemarkChanging(value);
					this.SendPropertyChanging();
					this._DeletedRemark = value;
					this.SendPropertyChanged("DeletedRemark");
					this.OnDeletedRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TaxonomyMetaData", Storage="_User", ThisKey="CreatedBy", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.TaxonomyMetaDatas.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.TaxonomyMetaDatas.Add(this);
						this._CreatedBy = value.ID;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TaxonomyMetaData1", Storage="_User1", ThisKey="DeletedBy", OtherKey="ID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.TaxonomyMetaDatas1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.TaxonomyMetaDatas1.Add(this);
						this._DeletedBy = value.ID;
					}
					else
					{
						this._DeletedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Remark_TaxonomyMetaData", Storage="_Remark", ThisKey="CreatedRemark", OtherKey="ID", IsForeignKey=true)]
		public Remark Remark
		{
			get
			{
				return this._Remark.Entity;
			}
			set
			{
				Remark previousValue = this._Remark.Entity;
				if (((previousValue != value) 
							|| (this._Remark.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Remark.Entity = null;
						previousValue.TaxonomyMetaDatas.Remove(this);
					}
					this._Remark.Entity = value;
					if ((value != null))
					{
						value.TaxonomyMetaDatas.Add(this);
						this._CreatedRemark = value.ID;
					}
					else
					{
						this._CreatedRemark = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Remark");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Remark_TaxonomyMetaData1", Storage="_Remark1", ThisKey="DeletedRemark", OtherKey="ID", IsForeignKey=true)]
		public Remark Remark1
		{
			get
			{
				return this._Remark1.Entity;
			}
			set
			{
				Remark previousValue = this._Remark1.Entity;
				if (((previousValue != value) 
							|| (this._Remark1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Remark1.Entity = null;
						previousValue.TaxonomyMetaDatas1.Remove(this);
					}
					this._Remark1.Entity = value;
					if ((value != null))
					{
						value.TaxonomyMetaDatas1.Add(this);
						this._DeletedRemark = value.ID;
					}
					else
					{
						this._DeletedRemark = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Remark1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaxonomyMetaInfo_TaxonomyMetaData", Storage="_TaxonomyMetaInfo", ThisKey="MetaID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TaxonomyMetaInfo TaxonomyMetaInfo
		{
			get
			{
				return this._TaxonomyMetaInfo.Entity;
			}
			set
			{
				TaxonomyMetaInfo previousValue = this._TaxonomyMetaInfo.Entity;
				if (((previousValue != value) 
							|| (this._TaxonomyMetaInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaxonomyMetaInfo.Entity = null;
						previousValue.TaxonomyMetaDatas.Remove(this);
					}
					this._TaxonomyMetaInfo.Entity = value;
					if ((value != null))
					{
						value.TaxonomyMetaDatas.Add(this);
						this._MetaID = value.ID;
					}
					else
					{
						this._MetaID = default(System.Guid);
					}
					this.SendPropertyChanged("TaxonomyMetaInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Remark")]
	public partial class Remark : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Remark1;
		
		private System.Nullable<bool> _IsCanned;
		
		private EntitySet<SchemaData> _SchemaDatas;
		
		private EntitySet<SchemaData> _SchemaDatas1;
		
		private EntitySet<SchemaMetaData> _SchemaMetaDatas;
		
		private EntitySet<SchemaMetaData> _SchemaMetaDatas1;
		
		private EntitySet<SkuInfo> _SkuInfos;
		
		private EntitySet<TaxonomyMetaData> _TaxonomyMetaDatas;
		
		private EntitySet<TaxonomyMetaData> _TaxonomyMetaDatas1;
		
		private EntitySet<TaxonomyData> _TaxonomyDatas;
		
		private EntitySet<TaxonomyData> _TaxonomyDatas1;
		
		private EntitySet<AttributeMetaData> _AttributeMetaDatas;
		
		private EntitySet<AttributeMetaData> _AttributeMetaDatas1;
		
		private EntitySet<EntityData> _EntityDatas;
		
		private EntitySet<EntityData> _EntityDatas1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnRemark1Changing(string value);
    partial void OnRemark1Changed();
    partial void OnIsCannedChanging(System.Nullable<bool> value);
    partial void OnIsCannedChanged();
    #endregion
		
		public Remark()
		{
			this._SchemaDatas = new EntitySet<SchemaData>(new Action<SchemaData>(this.attach_SchemaDatas), new Action<SchemaData>(this.detach_SchemaDatas));
			this._SchemaDatas1 = new EntitySet<SchemaData>(new Action<SchemaData>(this.attach_SchemaDatas1), new Action<SchemaData>(this.detach_SchemaDatas1));
			this._SchemaMetaDatas = new EntitySet<SchemaMetaData>(new Action<SchemaMetaData>(this.attach_SchemaMetaDatas), new Action<SchemaMetaData>(this.detach_SchemaMetaDatas));
			this._SchemaMetaDatas1 = new EntitySet<SchemaMetaData>(new Action<SchemaMetaData>(this.attach_SchemaMetaDatas1), new Action<SchemaMetaData>(this.detach_SchemaMetaDatas1));
			this._SkuInfos = new EntitySet<SkuInfo>(new Action<SkuInfo>(this.attach_SkuInfos), new Action<SkuInfo>(this.detach_SkuInfos));
			this._TaxonomyMetaDatas = new EntitySet<TaxonomyMetaData>(new Action<TaxonomyMetaData>(this.attach_TaxonomyMetaDatas), new Action<TaxonomyMetaData>(this.detach_TaxonomyMetaDatas));
			this._TaxonomyMetaDatas1 = new EntitySet<TaxonomyMetaData>(new Action<TaxonomyMetaData>(this.attach_TaxonomyMetaDatas1), new Action<TaxonomyMetaData>(this.detach_TaxonomyMetaDatas1));
			this._TaxonomyDatas = new EntitySet<TaxonomyData>(new Action<TaxonomyData>(this.attach_TaxonomyDatas), new Action<TaxonomyData>(this.detach_TaxonomyDatas));
			this._TaxonomyDatas1 = new EntitySet<TaxonomyData>(new Action<TaxonomyData>(this.attach_TaxonomyDatas1), new Action<TaxonomyData>(this.detach_TaxonomyDatas1));
			this._AttributeMetaDatas = new EntitySet<AttributeMetaData>(new Action<AttributeMetaData>(this.attach_AttributeMetaDatas), new Action<AttributeMetaData>(this.detach_AttributeMetaDatas));
			this._AttributeMetaDatas1 = new EntitySet<AttributeMetaData>(new Action<AttributeMetaData>(this.attach_AttributeMetaDatas1), new Action<AttributeMetaData>(this.detach_AttributeMetaDatas1));
			this._EntityDatas = new EntitySet<EntityData>(new Action<EntityData>(this.attach_EntityDatas), new Action<EntityData>(this.detach_EntityDatas));
			this._EntityDatas1 = new EntitySet<EntityData>(new Action<EntityData>(this.attach_EntityDatas1), new Action<EntityData>(this.detach_EntityDatas1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Remark", Storage="_Remark1", DbType="NVarChar(4000)")]
		public string Remark1
		{
			get
			{
				return this._Remark1;
			}
			set
			{
				if ((this._Remark1 != value))
				{
					this.OnRemark1Changing(value);
					this.SendPropertyChanging();
					this._Remark1 = value;
					this.SendPropertyChanged("Remark1");
					this.OnRemark1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCanned", DbType="Bit")]
		public System.Nullable<bool> IsCanned
		{
			get
			{
				return this._IsCanned;
			}
			set
			{
				if ((this._IsCanned != value))
				{
					this.OnIsCannedChanging(value);
					this.SendPropertyChanging();
					this._IsCanned = value;
					this.SendPropertyChanged("IsCanned");
					this.OnIsCannedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Remark_SchemaData", Storage="_SchemaDatas", ThisKey="ID", OtherKey="CreatedRemark")]
		public EntitySet<SchemaData> SchemaDatas
		{
			get
			{
				return this._SchemaDatas;
			}
			set
			{
				this._SchemaDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Remark_SchemaData1", Storage="_SchemaDatas1", ThisKey="ID", OtherKey="DeletedRemark")]
		public EntitySet<SchemaData> SchemaDatas1
		{
			get
			{
				return this._SchemaDatas1;
			}
			set
			{
				this._SchemaDatas1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Remark_SchemaMetaData", Storage="_SchemaMetaDatas", ThisKey="ID", OtherKey="CreatedRemark")]
		public EntitySet<SchemaMetaData> SchemaMetaDatas
		{
			get
			{
				return this._SchemaMetaDatas;
			}
			set
			{
				this._SchemaMetaDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Remark_SchemaMetaData1", Storage="_SchemaMetaDatas1", ThisKey="ID", OtherKey="DeletedRemark")]
		public EntitySet<SchemaMetaData> SchemaMetaDatas1
		{
			get
			{
				return this._SchemaMetaDatas1;
			}
			set
			{
				this._SchemaMetaDatas1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Remark_SkuInfo", Storage="_SkuInfos", ThisKey="ID", OtherKey="CreatedRemark")]
		public EntitySet<SkuInfo> SkuInfos
		{
			get
			{
				return this._SkuInfos;
			}
			set
			{
				this._SkuInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Remark_TaxonomyMetaData", Storage="_TaxonomyMetaDatas", ThisKey="ID", OtherKey="CreatedRemark")]
		public EntitySet<TaxonomyMetaData> TaxonomyMetaDatas
		{
			get
			{
				return this._TaxonomyMetaDatas;
			}
			set
			{
				this._TaxonomyMetaDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Remark_TaxonomyMetaData1", Storage="_TaxonomyMetaDatas1", ThisKey="ID", OtherKey="DeletedRemark")]
		public EntitySet<TaxonomyMetaData> TaxonomyMetaDatas1
		{
			get
			{
				return this._TaxonomyMetaDatas1;
			}
			set
			{
				this._TaxonomyMetaDatas1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Remark_TaxonomyData", Storage="_TaxonomyDatas", ThisKey="ID", OtherKey="CreatedRemark")]
		public EntitySet<TaxonomyData> TaxonomyDatas
		{
			get
			{
				return this._TaxonomyDatas;
			}
			set
			{
				this._TaxonomyDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Remark_TaxonomyData1", Storage="_TaxonomyDatas1", ThisKey="ID", OtherKey="DeletedRemark")]
		public EntitySet<TaxonomyData> TaxonomyDatas1
		{
			get
			{
				return this._TaxonomyDatas1;
			}
			set
			{
				this._TaxonomyDatas1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Remark_AttributeMetaData", Storage="_AttributeMetaDatas", ThisKey="ID", OtherKey="CreatedRemark")]
		public EntitySet<AttributeMetaData> AttributeMetaDatas
		{
			get
			{
				return this._AttributeMetaDatas;
			}
			set
			{
				this._AttributeMetaDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Remark_AttributeMetaData1", Storage="_AttributeMetaDatas1", ThisKey="ID", OtherKey="DeletedRemark")]
		public EntitySet<AttributeMetaData> AttributeMetaDatas1
		{
			get
			{
				return this._AttributeMetaDatas1;
			}
			set
			{
				this._AttributeMetaDatas1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Remark_EntityData", Storage="_EntityDatas", ThisKey="ID", OtherKey="CreatedRemark")]
		public EntitySet<EntityData> EntityDatas
		{
			get
			{
				return this._EntityDatas;
			}
			set
			{
				this._EntityDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Remark_EntityData1", Storage="_EntityDatas1", ThisKey="ID", OtherKey="DeletedRemark")]
		public EntitySet<EntityData> EntityDatas1
		{
			get
			{
				return this._EntityDatas1;
			}
			set
			{
				this._EntityDatas1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SchemaDatas(SchemaData entity)
		{
			this.SendPropertyChanging();
			entity.Remark = this;
		}
		
		private void detach_SchemaDatas(SchemaData entity)
		{
			this.SendPropertyChanging();
			entity.Remark = null;
		}
		
		private void attach_SchemaDatas1(SchemaData entity)
		{
			this.SendPropertyChanging();
			entity.Remark1 = this;
		}
		
		private void detach_SchemaDatas1(SchemaData entity)
		{
			this.SendPropertyChanging();
			entity.Remark1 = null;
		}
		
		private void attach_SchemaMetaDatas(SchemaMetaData entity)
		{
			this.SendPropertyChanging();
			entity.Remark = this;
		}
		
		private void detach_SchemaMetaDatas(SchemaMetaData entity)
		{
			this.SendPropertyChanging();
			entity.Remark = null;
		}
		
		private void attach_SchemaMetaDatas1(SchemaMetaData entity)
		{
			this.SendPropertyChanging();
			entity.Remark1 = this;
		}
		
		private void detach_SchemaMetaDatas1(SchemaMetaData entity)
		{
			this.SendPropertyChanging();
			entity.Remark1 = null;
		}
		
		private void attach_SkuInfos(SkuInfo entity)
		{
			this.SendPropertyChanging();
			entity.Remark = this;
		}
		
		private void detach_SkuInfos(SkuInfo entity)
		{
			this.SendPropertyChanging();
			entity.Remark = null;
		}
		
		private void attach_TaxonomyMetaDatas(TaxonomyMetaData entity)
		{
			this.SendPropertyChanging();
			entity.Remark = this;
		}
		
		private void detach_TaxonomyMetaDatas(TaxonomyMetaData entity)
		{
			this.SendPropertyChanging();
			entity.Remark = null;
		}
		
		private void attach_TaxonomyMetaDatas1(TaxonomyMetaData entity)
		{
			this.SendPropertyChanging();
			entity.Remark1 = this;
		}
		
		private void detach_TaxonomyMetaDatas1(TaxonomyMetaData entity)
		{
			this.SendPropertyChanging();
			entity.Remark1 = null;
		}
		
		private void attach_TaxonomyDatas(TaxonomyData entity)
		{
			this.SendPropertyChanging();
			entity.Remark = this;
		}
		
		private void detach_TaxonomyDatas(TaxonomyData entity)
		{
			this.SendPropertyChanging();
			entity.Remark = null;
		}
		
		private void attach_TaxonomyDatas1(TaxonomyData entity)
		{
			this.SendPropertyChanging();
			entity.Remark1 = this;
		}
		
		private void detach_TaxonomyDatas1(TaxonomyData entity)
		{
			this.SendPropertyChanging();
			entity.Remark1 = null;
		}
		
		private void attach_AttributeMetaDatas(AttributeMetaData entity)
		{
			this.SendPropertyChanging();
			entity.Remark = this;
		}
		
		private void detach_AttributeMetaDatas(AttributeMetaData entity)
		{
			this.SendPropertyChanging();
			entity.Remark = null;
		}
		
		private void attach_AttributeMetaDatas1(AttributeMetaData entity)
		{
			this.SendPropertyChanging();
			entity.Remark1 = this;
		}
		
		private void detach_AttributeMetaDatas1(AttributeMetaData entity)
		{
			this.SendPropertyChanging();
			entity.Remark1 = null;
		}
		
		private void attach_EntityDatas(EntityData entity)
		{
			this.SendPropertyChanging();
			entity.Remark = this;
		}
		
		private void detach_EntityDatas(EntityData entity)
		{
			this.SendPropertyChanging();
			entity.Remark = null;
		}
		
		private void attach_EntityDatas1(EntityData entity)
		{
			this.SendPropertyChanging();
			entity.Remark1 = this;
		}
		
		private void detach_EntityDatas1(EntityData entity)
		{
			this.SendPropertyChanging();
			entity.Remark1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaxonomyData")]
	public partial class TaxonomyData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _TaxonomyID;
		
		private System.Nullable<System.Guid> _ParentTaxonomyID;
		
		private string _NodeName;
		
		private string _NodeDescription;
		
		private System.DateTime _CreatedOn;
		
		private System.Guid _CreatedBy;
		
		private System.Nullable<System.Guid> _CreatedRemark;
		
		private bool _Active;
		
		private System.Nullable<System.DateTime> _DeletedOn;
		
		private System.Nullable<System.Guid> _DeletedBy;
		
		private System.Nullable<System.Guid> _DeletedRemark;
		
		private EntityRef<Remark> _Remark;
		
		private EntityRef<Remark> _Remark1;
		
		private EntityRef<TaxonomyInfo> _TaxonomyInfo;
		
		private EntityRef<TaxonomyInfo> _TaxonomyInfo1;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnTaxonomyIDChanging(System.Guid value);
    partial void OnTaxonomyIDChanged();
    partial void OnParentTaxonomyIDChanging(System.Nullable<System.Guid> value);
    partial void OnParentTaxonomyIDChanged();
    partial void OnNodeNameChanging(string value);
    partial void OnNodeNameChanged();
    partial void OnNodeDescriptionChanging(string value);
    partial void OnNodeDescriptionChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnCreatedRemarkChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedRemarkChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDeletedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedOnChanged();
    partial void OnDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnDeletedByChanged();
    partial void OnDeletedRemarkChanging(System.Nullable<System.Guid> value);
    partial void OnDeletedRemarkChanged();
    #endregion
		
		public TaxonomyData()
		{
			this._Remark = default(EntityRef<Remark>);
			this._Remark1 = default(EntityRef<Remark>);
			this._TaxonomyInfo = default(EntityRef<TaxonomyInfo>);
			this._TaxonomyInfo1 = default(EntityRef<TaxonomyInfo>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxonomyID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TaxonomyID
		{
			get
			{
				return this._TaxonomyID;
			}
			set
			{
				if ((this._TaxonomyID != value))
				{
					if (this._TaxonomyInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaxonomyIDChanging(value);
					this.SendPropertyChanging();
					this._TaxonomyID = value;
					this.SendPropertyChanged("TaxonomyID");
					this.OnTaxonomyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentTaxonomyID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ParentTaxonomyID
		{
			get
			{
				return this._ParentTaxonomyID;
			}
			set
			{
				if ((this._ParentTaxonomyID != value))
				{
					if (this._TaxonomyInfo1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentTaxonomyIDChanging(value);
					this.SendPropertyChanging();
					this._ParentTaxonomyID = value;
					this.SendPropertyChanged("ParentTaxonomyID");
					this.OnParentTaxonomyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeName", DbType="NVarChar(400) NOT NULL", CanBeNull=false)]
		public string NodeName
		{
			get
			{
				return this._NodeName;
			}
			set
			{
				if ((this._NodeName != value))
				{
					this.OnNodeNameChanging(value);
					this.SendPropertyChanging();
					this._NodeName = value;
					this.SendPropertyChanged("NodeName");
					this.OnNodeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NodeDescription", DbType="NVarChar(4000)")]
		public string NodeDescription
		{
			get
			{
				return this._NodeDescription;
			}
			set
			{
				if ((this._NodeDescription != value))
				{
					this.OnNodeDescriptionChanging(value);
					this.SendPropertyChanging();
					this._NodeDescription = value;
					this.SendPropertyChanged("NodeDescription");
					this.OnNodeDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedRemark", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedRemark
		{
			get
			{
				return this._CreatedRemark;
			}
			set
			{
				if ((this._CreatedRemark != value))
				{
					if (this._Remark.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedRemarkChanging(value);
					this.SendPropertyChanging();
					this._CreatedRemark = value;
					this.SendPropertyChanged("CreatedRemark");
					this.OnCreatedRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedOn
		{
			get
			{
				return this._DeletedOn;
			}
			set
			{
				if ((this._DeletedOn != value))
				{
					this.OnDeletedOnChanging(value);
					this.SendPropertyChanging();
					this._DeletedOn = value;
					this.SendPropertyChanged("DeletedOn");
					this.OnDeletedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DeletedBy
		{
			get
			{
				return this._DeletedBy;
			}
			set
			{
				if ((this._DeletedBy != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeletedByChanging(value);
					this.SendPropertyChanging();
					this._DeletedBy = value;
					this.SendPropertyChanged("DeletedBy");
					this.OnDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedRemark", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DeletedRemark
		{
			get
			{
				return this._DeletedRemark;
			}
			set
			{
				if ((this._DeletedRemark != value))
				{
					if (this._Remark1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeletedRemarkChanging(value);
					this.SendPropertyChanging();
					this._DeletedRemark = value;
					this.SendPropertyChanged("DeletedRemark");
					this.OnDeletedRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Remark_TaxonomyData", Storage="_Remark", ThisKey="CreatedRemark", OtherKey="ID", IsForeignKey=true)]
		public Remark Remark
		{
			get
			{
				return this._Remark.Entity;
			}
			set
			{
				Remark previousValue = this._Remark.Entity;
				if (((previousValue != value) 
							|| (this._Remark.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Remark.Entity = null;
						previousValue.TaxonomyDatas.Remove(this);
					}
					this._Remark.Entity = value;
					if ((value != null))
					{
						value.TaxonomyDatas.Add(this);
						this._CreatedRemark = value.ID;
					}
					else
					{
						this._CreatedRemark = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Remark");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Remark_TaxonomyData1", Storage="_Remark1", ThisKey="DeletedRemark", OtherKey="ID", IsForeignKey=true)]
		public Remark Remark1
		{
			get
			{
				return this._Remark1.Entity;
			}
			set
			{
				Remark previousValue = this._Remark1.Entity;
				if (((previousValue != value) 
							|| (this._Remark1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Remark1.Entity = null;
						previousValue.TaxonomyDatas1.Remove(this);
					}
					this._Remark1.Entity = value;
					if ((value != null))
					{
						value.TaxonomyDatas1.Add(this);
						this._DeletedRemark = value.ID;
					}
					else
					{
						this._DeletedRemark = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Remark1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaxonomyInfo_TaxonomyData", Storage="_TaxonomyInfo", ThisKey="TaxonomyID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public TaxonomyInfo TaxonomyInfo
		{
			get
			{
				return this._TaxonomyInfo.Entity;
			}
			set
			{
				TaxonomyInfo previousValue = this._TaxonomyInfo.Entity;
				if (((previousValue != value) 
							|| (this._TaxonomyInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaxonomyInfo.Entity = null;
						previousValue.TaxonomyDatas.Remove(this);
					}
					this._TaxonomyInfo.Entity = value;
					if ((value != null))
					{
						value.TaxonomyDatas.Add(this);
						this._TaxonomyID = value.ID;
					}
					else
					{
						this._TaxonomyID = default(System.Guid);
					}
					this.SendPropertyChanged("TaxonomyInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaxonomyInfo_TaxonomyData1", Storage="_TaxonomyInfo1", ThisKey="ParentTaxonomyID", OtherKey="ID", IsForeignKey=true)]
		public TaxonomyInfo TaxonomyInfo1
		{
			get
			{
				return this._TaxonomyInfo1.Entity;
			}
			set
			{
				TaxonomyInfo previousValue = this._TaxonomyInfo1.Entity;
				if (((previousValue != value) 
							|| (this._TaxonomyInfo1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaxonomyInfo1.Entity = null;
						previousValue.TaxonomyDatas1.Remove(this);
					}
					this._TaxonomyInfo1.Entity = value;
					if ((value != null))
					{
						value.TaxonomyDatas1.Add(this);
						this._ParentTaxonomyID = value.ID;
					}
					else
					{
						this._ParentTaxonomyID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("TaxonomyInfo1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TaxonomyData", Storage="_User", ThisKey="CreatedBy", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.TaxonomyDatas.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.TaxonomyDatas.Add(this);
						this._CreatedBy = value.ID;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_TaxonomyData1", Storage="_User1", ThisKey="DeletedBy", OtherKey="ID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.TaxonomyDatas1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.TaxonomyDatas1.Add(this);
						this._DeletedBy = value.ID;
					}
					else
					{
						this._DeletedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Attribute")]
	public partial class Attribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _ProjectID;
		
		private string _AttributeType;
		
		private string _AttributeName;
		
		private bool _Readonly;
		
		private System.DateTime _CreatedOn;
		
		private System.Guid _CreatedBy;
		
		private EntitySet<DerivedAttribute> _DerivedAttributes;
		
		private EntitySet<SchemaInfo> _SchemaInfos;
		
		private EntitySet<SchemaMetaInfo> _SchemaMetaInfos;
		
		private EntitySet<TaxonomyMetaInfo> _TaxonomyMetaInfos;
		
		private EntitySet<AttributeGroup> _AttributeGroups;
		
		private EntitySet<AttributeMetaInfo> _AttributeMetaInfos;
		
		private EntitySet<AttributeMetaInfo> _AttributeMetaInfos1;
		
		private EntitySet<DerivedEntityData> _DerivedEntityDatas;
		
		private EntitySet<EntityData> _EntityDatas;
		
		private EntityRef<User> _User;
		
		private EntityRef<Project> _Project;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnProjectIDChanging(System.Guid value);
    partial void OnProjectIDChanged();
    partial void OnAttributeTypeChanging(string value);
    partial void OnAttributeTypeChanged();
    partial void OnAttributeNameChanging(string value);
    partial void OnAttributeNameChanged();
    partial void OnReadonlyChanging(bool value);
    partial void OnReadonlyChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    #endregion
		
		public Attribute()
		{
			this._DerivedAttributes = new EntitySet<DerivedAttribute>(new Action<DerivedAttribute>(this.attach_DerivedAttributes), new Action<DerivedAttribute>(this.detach_DerivedAttributes));
			this._SchemaInfos = new EntitySet<SchemaInfo>(new Action<SchemaInfo>(this.attach_SchemaInfos), new Action<SchemaInfo>(this.detach_SchemaInfos));
			this._SchemaMetaInfos = new EntitySet<SchemaMetaInfo>(new Action<SchemaMetaInfo>(this.attach_SchemaMetaInfos), new Action<SchemaMetaInfo>(this.detach_SchemaMetaInfos));
			this._TaxonomyMetaInfos = new EntitySet<TaxonomyMetaInfo>(new Action<TaxonomyMetaInfo>(this.attach_TaxonomyMetaInfos), new Action<TaxonomyMetaInfo>(this.detach_TaxonomyMetaInfos));
			this._AttributeGroups = new EntitySet<AttributeGroup>(new Action<AttributeGroup>(this.attach_AttributeGroups), new Action<AttributeGroup>(this.detach_AttributeGroups));
			this._AttributeMetaInfos = new EntitySet<AttributeMetaInfo>(new Action<AttributeMetaInfo>(this.attach_AttributeMetaInfos), new Action<AttributeMetaInfo>(this.detach_AttributeMetaInfos));
			this._AttributeMetaInfos1 = new EntitySet<AttributeMetaInfo>(new Action<AttributeMetaInfo>(this.attach_AttributeMetaInfos1), new Action<AttributeMetaInfo>(this.detach_AttributeMetaInfos1));
			this._DerivedEntityDatas = new EntitySet<DerivedEntityData>(new Action<DerivedEntityData>(this.attach_DerivedEntityDatas), new Action<DerivedEntityData>(this.detach_DerivedEntityDatas));
			this._EntityDatas = new EntitySet<EntityData>(new Action<EntityData>(this.attach_EntityDatas), new Action<EntityData>(this.detach_EntityDatas));
			this._User = default(EntityRef<User>);
			this._Project = default(EntityRef<Project>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttributeType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AttributeType
		{
			get
			{
				return this._AttributeType;
			}
			set
			{
				if ((this._AttributeType != value))
				{
					this.OnAttributeTypeChanging(value);
					this.SendPropertyChanging();
					this._AttributeType = value;
					this.SendPropertyChanged("AttributeType");
					this.OnAttributeTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttributeName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string AttributeName
		{
			get
			{
				return this._AttributeName;
			}
			set
			{
				if ((this._AttributeName != value))
				{
					this.OnAttributeNameChanging(value);
					this.SendPropertyChanging();
					this._AttributeName = value;
					this.SendPropertyChanged("AttributeName");
					this.OnAttributeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Readonly", DbType="Bit NOT NULL")]
		public bool Readonly
		{
			get
			{
				return this._Readonly;
			}
			set
			{
				if ((this._Readonly != value))
				{
					this.OnReadonlyChanging(value);
					this.SendPropertyChanging();
					this._Readonly = value;
					this.SendPropertyChanged("Readonly");
					this.OnReadonlyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attribute_DerivedAttribute", Storage="_DerivedAttributes", ThisKey="ID", OtherKey="AttributeID")]
		public EntitySet<DerivedAttribute> DerivedAttributes
		{
			get
			{
				return this._DerivedAttributes;
			}
			set
			{
				this._DerivedAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attribute_SchemaInfo", Storage="_SchemaInfos", ThisKey="ID", OtherKey="AttributeID")]
		public EntitySet<SchemaInfo> SchemaInfos
		{
			get
			{
				return this._SchemaInfos;
			}
			set
			{
				this._SchemaInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attribute_SchemaMetaInfo", Storage="_SchemaMetaInfos", ThisKey="ID", OtherKey="MetaAttributeID")]
		public EntitySet<SchemaMetaInfo> SchemaMetaInfos
		{
			get
			{
				return this._SchemaMetaInfos;
			}
			set
			{
				this._SchemaMetaInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attribute_TaxonomyMetaInfo", Storage="_TaxonomyMetaInfos", ThisKey="ID", OtherKey="MetaAttributeID")]
		public EntitySet<TaxonomyMetaInfo> TaxonomyMetaInfos
		{
			get
			{
				return this._TaxonomyMetaInfos;
			}
			set
			{
				this._TaxonomyMetaInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attribute_AttributeGroup", Storage="_AttributeGroups", ThisKey="ID", OtherKey="AttributeID")]
		public EntitySet<AttributeGroup> AttributeGroups
		{
			get
			{
				return this._AttributeGroups;
			}
			set
			{
				this._AttributeGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attribute_AttributeMetaInfo", Storage="_AttributeMetaInfos", ThisKey="ID", OtherKey="MetaAttributeID")]
		public EntitySet<AttributeMetaInfo> AttributeMetaInfos
		{
			get
			{
				return this._AttributeMetaInfos;
			}
			set
			{
				this._AttributeMetaInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attribute_AttributeMetaInfo1", Storage="_AttributeMetaInfos1", ThisKey="ID", OtherKey="AttributeID")]
		public EntitySet<AttributeMetaInfo> AttributeMetaInfos1
		{
			get
			{
				return this._AttributeMetaInfos1;
			}
			set
			{
				this._AttributeMetaInfos1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attribute_DerivedEntityData", Storage="_DerivedEntityDatas", ThisKey="ID", OtherKey="AttributeID")]
		public EntitySet<DerivedEntityData> DerivedEntityDatas
		{
			get
			{
				return this._DerivedEntityDatas;
			}
			set
			{
				this._DerivedEntityDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attribute_EntityData", Storage="_EntityDatas", ThisKey="ID", OtherKey="AttributeID")]
		public EntitySet<EntityData> EntityDatas
		{
			get
			{
				return this._EntityDatas;
			}
			set
			{
				this._EntityDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Attribute", Storage="_User", ThisKey="CreatedBy", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Attributes.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Attributes.Add(this);
						this._CreatedBy = value.ID;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Attribute", Storage="_Project", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Attributes.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Attributes.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(System.Guid);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DerivedAttributes(DerivedAttribute entity)
		{
			this.SendPropertyChanging();
			entity.Attribute = this;
		}
		
		private void detach_DerivedAttributes(DerivedAttribute entity)
		{
			this.SendPropertyChanging();
			entity.Attribute = null;
		}
		
		private void attach_SchemaInfos(SchemaInfo entity)
		{
			this.SendPropertyChanging();
			entity.Attribute = this;
		}
		
		private void detach_SchemaInfos(SchemaInfo entity)
		{
			this.SendPropertyChanging();
			entity.Attribute = null;
		}
		
		private void attach_SchemaMetaInfos(SchemaMetaInfo entity)
		{
			this.SendPropertyChanging();
			entity.Attribute = this;
		}
		
		private void detach_SchemaMetaInfos(SchemaMetaInfo entity)
		{
			this.SendPropertyChanging();
			entity.Attribute = null;
		}
		
		private void attach_TaxonomyMetaInfos(TaxonomyMetaInfo entity)
		{
			this.SendPropertyChanging();
			entity.Attribute = this;
		}
		
		private void detach_TaxonomyMetaInfos(TaxonomyMetaInfo entity)
		{
			this.SendPropertyChanging();
			entity.Attribute = null;
		}
		
		private void attach_AttributeGroups(AttributeGroup entity)
		{
			this.SendPropertyChanging();
			entity.Attribute = this;
		}
		
		private void detach_AttributeGroups(AttributeGroup entity)
		{
			this.SendPropertyChanging();
			entity.Attribute = null;
		}
		
		private void attach_AttributeMetaInfos(AttributeMetaInfo entity)
		{
			this.SendPropertyChanging();
			entity.Attribute = this;
		}
		
		private void detach_AttributeMetaInfos(AttributeMetaInfo entity)
		{
			this.SendPropertyChanging();
			entity.Attribute = null;
		}
		
		private void attach_AttributeMetaInfos1(AttributeMetaInfo entity)
		{
			this.SendPropertyChanging();
			entity.Attribute1 = this;
		}
		
		private void detach_AttributeMetaInfos1(AttributeMetaInfo entity)
		{
			this.SendPropertyChanging();
			entity.Attribute1 = null;
		}
		
		private void attach_DerivedEntityDatas(DerivedEntityData entity)
		{
			this.SendPropertyChanging();
			entity.Attribute = this;
		}
		
		private void detach_DerivedEntityDatas(DerivedEntityData entity)
		{
			this.SendPropertyChanging();
			entity.Attribute = null;
		}
		
		private void attach_EntityDatas(EntityData entity)
		{
			this.SendPropertyChanging();
			entity.Attribute = this;
		}
		
		private void detach_EntityDatas(EntityData entity)
		{
			this.SendPropertyChanging();
			entity.Attribute = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SchemaMetaInfo")]
	public partial class SchemaMetaInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _SchemaID;
		
		private System.Guid _MetaAttributeID;
		
		private EntitySet<SchemaMetaData> _SchemaMetaDatas;
		
		private EntityRef<Attribute> _Attribute;
		
		private EntityRef<SchemaInfo> _SchemaInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnSchemaIDChanging(System.Guid value);
    partial void OnSchemaIDChanged();
    partial void OnMetaAttributeIDChanging(System.Guid value);
    partial void OnMetaAttributeIDChanged();
    #endregion
		
		public SchemaMetaInfo()
		{
			this._SchemaMetaDatas = new EntitySet<SchemaMetaData>(new Action<SchemaMetaData>(this.attach_SchemaMetaDatas), new Action<SchemaMetaData>(this.detach_SchemaMetaDatas));
			this._Attribute = default(EntityRef<Attribute>);
			this._SchemaInfo = default(EntityRef<SchemaInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchemaID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchemaID
		{
			get
			{
				return this._SchemaID;
			}
			set
			{
				if ((this._SchemaID != value))
				{
					if (this._SchemaInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchemaIDChanging(value);
					this.SendPropertyChanging();
					this._SchemaID = value;
					this.SendPropertyChanged("SchemaID");
					this.OnSchemaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetaAttributeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid MetaAttributeID
		{
			get
			{
				return this._MetaAttributeID;
			}
			set
			{
				if ((this._MetaAttributeID != value))
				{
					if (this._Attribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetaAttributeIDChanging(value);
					this.SendPropertyChanging();
					this._MetaAttributeID = value;
					this.SendPropertyChanged("MetaAttributeID");
					this.OnMetaAttributeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchemaMetaInfo_SchemaMetaData", Storage="_SchemaMetaDatas", ThisKey="ID", OtherKey="MetaID")]
		public EntitySet<SchemaMetaData> SchemaMetaDatas
		{
			get
			{
				return this._SchemaMetaDatas;
			}
			set
			{
				this._SchemaMetaDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attribute_SchemaMetaInfo", Storage="_Attribute", ThisKey="MetaAttributeID", OtherKey="ID", IsForeignKey=true)]
		public Attribute Attribute
		{
			get
			{
				return this._Attribute.Entity;
			}
			set
			{
				Attribute previousValue = this._Attribute.Entity;
				if (((previousValue != value) 
							|| (this._Attribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attribute.Entity = null;
						previousValue.SchemaMetaInfos.Remove(this);
					}
					this._Attribute.Entity = value;
					if ((value != null))
					{
						value.SchemaMetaInfos.Add(this);
						this._MetaAttributeID = value.ID;
					}
					else
					{
						this._MetaAttributeID = default(System.Guid);
					}
					this.SendPropertyChanged("Attribute");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchemaInfo_SchemaMetaInfo", Storage="_SchemaInfo", ThisKey="SchemaID", OtherKey="ID", IsForeignKey=true)]
		public SchemaInfo SchemaInfo
		{
			get
			{
				return this._SchemaInfo.Entity;
			}
			set
			{
				SchemaInfo previousValue = this._SchemaInfo.Entity;
				if (((previousValue != value) 
							|| (this._SchemaInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchemaInfo.Entity = null;
						previousValue.SchemaMetaInfos.Remove(this);
					}
					this._SchemaInfo.Entity = value;
					if ((value != null))
					{
						value.SchemaMetaInfos.Add(this);
						this._SchemaID = value.ID;
					}
					else
					{
						this._SchemaID = default(System.Guid);
					}
					this.SendPropertyChanged("SchemaInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SchemaMetaDatas(SchemaMetaData entity)
		{
			this.SendPropertyChanging();
			entity.SchemaMetaInfo = this;
		}
		
		private void detach_SchemaMetaDatas(SchemaMetaData entity)
		{
			this.SendPropertyChanging();
			entity.SchemaMetaInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaxonomyMetaInfo")]
	public partial class TaxonomyMetaInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _TaxonomyID;
		
		private System.Guid _MetaAttributeID;
		
		private EntitySet<TaxonomyMetaData> _TaxonomyMetaDatas;
		
		private EntityRef<Attribute> _Attribute;
		
		private EntityRef<TaxonomyInfo> _TaxonomyInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnTaxonomyIDChanging(System.Guid value);
    partial void OnTaxonomyIDChanged();
    partial void OnMetaAttributeIDChanging(System.Guid value);
    partial void OnMetaAttributeIDChanged();
    #endregion
		
		public TaxonomyMetaInfo()
		{
			this._TaxonomyMetaDatas = new EntitySet<TaxonomyMetaData>(new Action<TaxonomyMetaData>(this.attach_TaxonomyMetaDatas), new Action<TaxonomyMetaData>(this.detach_TaxonomyMetaDatas));
			this._Attribute = default(EntityRef<Attribute>);
			this._TaxonomyInfo = default(EntityRef<TaxonomyInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxonomyID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid TaxonomyID
		{
			get
			{
				return this._TaxonomyID;
			}
			set
			{
				if ((this._TaxonomyID != value))
				{
					if (this._TaxonomyInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaxonomyIDChanging(value);
					this.SendPropertyChanging();
					this._TaxonomyID = value;
					this.SendPropertyChanged("TaxonomyID");
					this.OnTaxonomyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetaAttributeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid MetaAttributeID
		{
			get
			{
				return this._MetaAttributeID;
			}
			set
			{
				if ((this._MetaAttributeID != value))
				{
					if (this._Attribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetaAttributeIDChanging(value);
					this.SendPropertyChanging();
					this._MetaAttributeID = value;
					this.SendPropertyChanged("MetaAttributeID");
					this.OnMetaAttributeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaxonomyMetaInfo_TaxonomyMetaData", Storage="_TaxonomyMetaDatas", ThisKey="ID", OtherKey="MetaID")]
		public EntitySet<TaxonomyMetaData> TaxonomyMetaDatas
		{
			get
			{
				return this._TaxonomyMetaDatas;
			}
			set
			{
				this._TaxonomyMetaDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attribute_TaxonomyMetaInfo", Storage="_Attribute", ThisKey="MetaAttributeID", OtherKey="ID", IsForeignKey=true)]
		public Attribute Attribute
		{
			get
			{
				return this._Attribute.Entity;
			}
			set
			{
				Attribute previousValue = this._Attribute.Entity;
				if (((previousValue != value) 
							|| (this._Attribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attribute.Entity = null;
						previousValue.TaxonomyMetaInfos.Remove(this);
					}
					this._Attribute.Entity = value;
					if ((value != null))
					{
						value.TaxonomyMetaInfos.Add(this);
						this._MetaAttributeID = value.ID;
					}
					else
					{
						this._MetaAttributeID = default(System.Guid);
					}
					this.SendPropertyChanged("Attribute");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaxonomyInfo_TaxonomyMetaInfo", Storage="_TaxonomyInfo", ThisKey="TaxonomyID", OtherKey="ID", IsForeignKey=true)]
		public TaxonomyInfo TaxonomyInfo
		{
			get
			{
				return this._TaxonomyInfo.Entity;
			}
			set
			{
				TaxonomyInfo previousValue = this._TaxonomyInfo.Entity;
				if (((previousValue != value) 
							|| (this._TaxonomyInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaxonomyInfo.Entity = null;
						previousValue.TaxonomyMetaInfos.Remove(this);
					}
					this._TaxonomyInfo.Entity = value;
					if ((value != null))
					{
						value.TaxonomyMetaInfos.Add(this);
						this._TaxonomyID = value.ID;
					}
					else
					{
						this._TaxonomyID = default(System.Guid);
					}
					this.SendPropertyChanged("TaxonomyInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TaxonomyMetaDatas(TaxonomyMetaData entity)
		{
			this.SendPropertyChanging();
			entity.TaxonomyMetaInfo = this;
		}
		
		private void detach_TaxonomyMetaDatas(TaxonomyMetaData entity)
		{
			this.SendPropertyChanging();
			entity.TaxonomyMetaInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AttributeGroup")]
	public partial class AttributeGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _AttributeID;
		
		private System.Guid _GroupID;
		
		private bool _Active;
		
		private EntityRef<Attribute> _Attribute;
		
		private EntityRef<Group> _Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnAttributeIDChanging(System.Guid value);
    partial void OnAttributeIDChanged();
    partial void OnGroupIDChanging(System.Guid value);
    partial void OnGroupIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public AttributeGroup()
		{
			this._Attribute = default(EntityRef<Attribute>);
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttributeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AttributeID
		{
			get
			{
				return this._AttributeID;
			}
			set
			{
				if ((this._AttributeID != value))
				{
					if (this._Attribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttributeIDChanging(value);
					this.SendPropertyChanging();
					this._AttributeID = value;
					this.SendPropertyChanged("AttributeID");
					this.OnAttributeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attribute_AttributeGroup", Storage="_Attribute", ThisKey="AttributeID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Attribute Attribute
		{
			get
			{
				return this._Attribute.Entity;
			}
			set
			{
				Attribute previousValue = this._Attribute.Entity;
				if (((previousValue != value) 
							|| (this._Attribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attribute.Entity = null;
						previousValue.AttributeGroups.Remove(this);
					}
					this._Attribute.Entity = value;
					if ((value != null))
					{
						value.AttributeGroups.Add(this);
						this._AttributeID = value.ID;
					}
					else
					{
						this._AttributeID = default(System.Guid);
					}
					this.SendPropertyChanged("Attribute");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_AttributeGroup", Storage="_Group", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.AttributeGroups.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.AttributeGroups.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(System.Guid);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AttributeMetaData")]
	public partial class AttributeMetaData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _MetaID;
		
		private string _Value;
		
		private System.DateTime _CreatedOn;
		
		private System.Guid _CreatedBy;
		
		private System.Nullable<System.Guid> _CreatedRemark;
		
		private System.Nullable<System.DateTime> _DeletedOn;
		
		private System.Nullable<System.Guid> _DeletedBy;
		
		private System.Nullable<System.Guid> _DeletedRemark;
		
		private bool _Active;
		
		private EntityRef<Remark> _Remark;
		
		private EntityRef<Remark> _Remark1;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
		private EntityRef<AttributeMetaInfo> _AttributeMetaInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnMetaIDChanging(System.Guid value);
    partial void OnMetaIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnCreatedRemarkChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedRemarkChanged();
    partial void OnDeletedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedOnChanged();
    partial void OnDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnDeletedByChanged();
    partial void OnDeletedRemarkChanging(System.Nullable<System.Guid> value);
    partial void OnDeletedRemarkChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public AttributeMetaData()
		{
			this._Remark = default(EntityRef<Remark>);
			this._Remark1 = default(EntityRef<Remark>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			this._AttributeMetaInfo = default(EntityRef<AttributeMetaInfo>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetaID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid MetaID
		{
			get
			{
				return this._MetaID;
			}
			set
			{
				if ((this._MetaID != value))
				{
					if (this._AttributeMetaInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetaIDChanging(value);
					this.SendPropertyChanging();
					this._MetaID = value;
					this.SendPropertyChanged("MetaID");
					this.OnMetaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedRemark", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedRemark
		{
			get
			{
				return this._CreatedRemark;
			}
			set
			{
				if ((this._CreatedRemark != value))
				{
					if (this._Remark.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedRemarkChanging(value);
					this.SendPropertyChanging();
					this._CreatedRemark = value;
					this.SendPropertyChanged("CreatedRemark");
					this.OnCreatedRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedOn
		{
			get
			{
				return this._DeletedOn;
			}
			set
			{
				if ((this._DeletedOn != value))
				{
					this.OnDeletedOnChanging(value);
					this.SendPropertyChanging();
					this._DeletedOn = value;
					this.SendPropertyChanged("DeletedOn");
					this.OnDeletedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DeletedBy
		{
			get
			{
				return this._DeletedBy;
			}
			set
			{
				if ((this._DeletedBy != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeletedByChanging(value);
					this.SendPropertyChanging();
					this._DeletedBy = value;
					this.SendPropertyChanged("DeletedBy");
					this.OnDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedRemark", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DeletedRemark
		{
			get
			{
				return this._DeletedRemark;
			}
			set
			{
				if ((this._DeletedRemark != value))
				{
					if (this._Remark1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeletedRemarkChanging(value);
					this.SendPropertyChanging();
					this._DeletedRemark = value;
					this.SendPropertyChanged("DeletedRemark");
					this.OnDeletedRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Remark_AttributeMetaData", Storage="_Remark", ThisKey="CreatedRemark", OtherKey="ID", IsForeignKey=true)]
		public Remark Remark
		{
			get
			{
				return this._Remark.Entity;
			}
			set
			{
				Remark previousValue = this._Remark.Entity;
				if (((previousValue != value) 
							|| (this._Remark.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Remark.Entity = null;
						previousValue.AttributeMetaDatas.Remove(this);
					}
					this._Remark.Entity = value;
					if ((value != null))
					{
						value.AttributeMetaDatas.Add(this);
						this._CreatedRemark = value.ID;
					}
					else
					{
						this._CreatedRemark = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Remark");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Remark_AttributeMetaData1", Storage="_Remark1", ThisKey="DeletedRemark", OtherKey="ID", IsForeignKey=true)]
		public Remark Remark1
		{
			get
			{
				return this._Remark1.Entity;
			}
			set
			{
				Remark previousValue = this._Remark1.Entity;
				if (((previousValue != value) 
							|| (this._Remark1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Remark1.Entity = null;
						previousValue.AttributeMetaDatas1.Remove(this);
					}
					this._Remark1.Entity = value;
					if ((value != null))
					{
						value.AttributeMetaDatas1.Add(this);
						this._DeletedRemark = value.ID;
					}
					else
					{
						this._DeletedRemark = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Remark1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AttributeMetaData", Storage="_User", ThisKey="CreatedBy", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.AttributeMetaDatas.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.AttributeMetaDatas.Add(this);
						this._CreatedBy = value.ID;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AttributeMetaData1", Storage="_User1", ThisKey="DeletedBy", OtherKey="ID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.AttributeMetaDatas1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.AttributeMetaDatas1.Add(this);
						this._DeletedBy = value.ID;
					}
					else
					{
						this._DeletedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AttributeMetaInfo_AttributeMetaData", Storage="_AttributeMetaInfo", ThisKey="MetaID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AttributeMetaInfo AttributeMetaInfo
		{
			get
			{
				return this._AttributeMetaInfo.Entity;
			}
			set
			{
				AttributeMetaInfo previousValue = this._AttributeMetaInfo.Entity;
				if (((previousValue != value) 
							|| (this._AttributeMetaInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AttributeMetaInfo.Entity = null;
						previousValue.AttributeMetaDatas.Remove(this);
					}
					this._AttributeMetaInfo.Entity = value;
					if ((value != null))
					{
						value.AttributeMetaDatas.Add(this);
						this._MetaID = value.ID;
					}
					else
					{
						this._MetaID = default(System.Guid);
					}
					this.SendPropertyChanged("AttributeMetaInfo");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AttributeMetaInfo")]
	public partial class AttributeMetaInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _AttributeID;
		
		private System.Guid _MetaAttributeID;
		
		private EntitySet<AttributeMetaData> _AttributeMetaDatas;
		
		private EntityRef<Attribute> _Attribute;
		
		private EntityRef<Attribute> _Attribute1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnAttributeIDChanging(System.Guid value);
    partial void OnAttributeIDChanged();
    partial void OnMetaAttributeIDChanging(System.Guid value);
    partial void OnMetaAttributeIDChanged();
    #endregion
		
		public AttributeMetaInfo()
		{
			this._AttributeMetaDatas = new EntitySet<AttributeMetaData>(new Action<AttributeMetaData>(this.attach_AttributeMetaDatas), new Action<AttributeMetaData>(this.detach_AttributeMetaDatas));
			this._Attribute = default(EntityRef<Attribute>);
			this._Attribute1 = default(EntityRef<Attribute>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttributeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AttributeID
		{
			get
			{
				return this._AttributeID;
			}
			set
			{
				if ((this._AttributeID != value))
				{
					if (this._Attribute1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttributeIDChanging(value);
					this.SendPropertyChanging();
					this._AttributeID = value;
					this.SendPropertyChanged("AttributeID");
					this.OnAttributeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MetaAttributeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid MetaAttributeID
		{
			get
			{
				return this._MetaAttributeID;
			}
			set
			{
				if ((this._MetaAttributeID != value))
				{
					if (this._Attribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMetaAttributeIDChanging(value);
					this.SendPropertyChanging();
					this._MetaAttributeID = value;
					this.SendPropertyChanged("MetaAttributeID");
					this.OnMetaAttributeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AttributeMetaInfo_AttributeMetaData", Storage="_AttributeMetaDatas", ThisKey="ID", OtherKey="MetaID")]
		public EntitySet<AttributeMetaData> AttributeMetaDatas
		{
			get
			{
				return this._AttributeMetaDatas;
			}
			set
			{
				this._AttributeMetaDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attribute_AttributeMetaInfo", Storage="_Attribute", ThisKey="MetaAttributeID", OtherKey="ID", IsForeignKey=true)]
		public Attribute Attribute
		{
			get
			{
				return this._Attribute.Entity;
			}
			set
			{
				Attribute previousValue = this._Attribute.Entity;
				if (((previousValue != value) 
							|| (this._Attribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attribute.Entity = null;
						previousValue.AttributeMetaInfos.Remove(this);
					}
					this._Attribute.Entity = value;
					if ((value != null))
					{
						value.AttributeMetaInfos.Add(this);
						this._MetaAttributeID = value.ID;
					}
					else
					{
						this._MetaAttributeID = default(System.Guid);
					}
					this.SendPropertyChanged("Attribute");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attribute_AttributeMetaInfo1", Storage="_Attribute1", ThisKey="AttributeID", OtherKey="ID", IsForeignKey=true)]
		public Attribute Attribute1
		{
			get
			{
				return this._Attribute1.Entity;
			}
			set
			{
				Attribute previousValue = this._Attribute1.Entity;
				if (((previousValue != value) 
							|| (this._Attribute1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attribute1.Entity = null;
						previousValue.AttributeMetaInfos1.Remove(this);
					}
					this._Attribute1.Entity = value;
					if ((value != null))
					{
						value.AttributeMetaInfos1.Add(this);
						this._AttributeID = value.ID;
					}
					else
					{
						this._AttributeID = default(System.Guid);
					}
					this.SendPropertyChanged("Attribute1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AttributeMetaDatas(AttributeMetaData entity)
		{
			this.SendPropertyChanging();
			entity.AttributeMetaInfo = this;
		}
		
		private void detach_AttributeMetaDatas(AttributeMetaData entity)
		{
			this.SendPropertyChanging();
			entity.AttributeMetaInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DerivedEntityData")]
	public partial class DerivedEntityData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _SkuID;
		
		private System.Guid _AttributeID;
		
		private string _Value;
		
		private string _Uom;
		
		private System.DateTime _CreatedOn;
		
		private bool _Active;
		
		private EntityRef<Attribute> _Attribute;
		
		private EntityRef<Sku> _Sku;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnSkuIDChanging(System.Guid value);
    partial void OnSkuIDChanged();
    partial void OnAttributeIDChanging(System.Guid value);
    partial void OnAttributeIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnUomChanging(string value);
    partial void OnUomChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public DerivedEntityData()
		{
			this._Attribute = default(EntityRef<Attribute>);
			this._Sku = default(EntityRef<Sku>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SkuID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SkuID
		{
			get
			{
				return this._SkuID;
			}
			set
			{
				if ((this._SkuID != value))
				{
					if (this._Sku.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSkuIDChanging(value);
					this.SendPropertyChanging();
					this._SkuID = value;
					this.SendPropertyChanged("SkuID");
					this.OnSkuIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttributeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AttributeID
		{
			get
			{
				return this._AttributeID;
			}
			set
			{
				if ((this._AttributeID != value))
				{
					if (this._Attribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttributeIDChanging(value);
					this.SendPropertyChanging();
					this._AttributeID = value;
					this.SendPropertyChanged("AttributeID");
					this.OnAttributeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uom", DbType="NVarChar(50)")]
		public string Uom
		{
			get
			{
				return this._Uom;
			}
			set
			{
				if ((this._Uom != value))
				{
					this.OnUomChanging(value);
					this.SendPropertyChanging();
					this._Uom = value;
					this.SendPropertyChanged("Uom");
					this.OnUomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attribute_DerivedEntityData", Storage="_Attribute", ThisKey="AttributeID", OtherKey="ID", IsForeignKey=true)]
		public Attribute Attribute
		{
			get
			{
				return this._Attribute.Entity;
			}
			set
			{
				Attribute previousValue = this._Attribute.Entity;
				if (((previousValue != value) 
							|| (this._Attribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attribute.Entity = null;
						previousValue.DerivedEntityDatas.Remove(this);
					}
					this._Attribute.Entity = value;
					if ((value != null))
					{
						value.DerivedEntityDatas.Add(this);
						this._AttributeID = value.ID;
					}
					else
					{
						this._AttributeID = default(System.Guid);
					}
					this.SendPropertyChanged("Attribute");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sku_DerivedEntityData", Storage="_Sku", ThisKey="SkuID", OtherKey="ID", IsForeignKey=true)]
		public Sku Sku
		{
			get
			{
				return this._Sku.Entity;
			}
			set
			{
				Sku previousValue = this._Sku.Entity;
				if (((previousValue != value) 
							|| (this._Sku.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sku.Entity = null;
						previousValue.DerivedEntityDatas.Remove(this);
					}
					this._Sku.Entity = value;
					if ((value != null))
					{
						value.DerivedEntityDatas.Add(this);
						this._SkuID = value.ID;
					}
					else
					{
						this._SkuID = default(System.Guid);
					}
					this.SendPropertyChanged("Sku");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntityData")]
	public partial class EntityData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _EntityID;
		
		private System.Guid _AttributeID;
		
		private string _Value;
		
		private string _Uom;
		
		private string _Field1;
		
		private string _Field2;
		
		private string _Field3;
		
		private string _Field4;
		
		private string _Field5;
		
		private System.DateTime _CreatedOn;
		
		private System.Guid _CreatedBy;
		
		private System.Nullable<System.Guid> _CreatedRemark;
		
		private bool _Active;
		
		private System.Nullable<System.DateTime> _DeletedOn;
		
		private System.Nullable<System.Guid> _DeletedBy;
		
		private System.Nullable<System.Guid> _DeletedRemark;
		
		private bool _BeforeEntity;
		
		private bool _Published;
		
		private System.Nullable<decimal> _BaseValue;
		
		private EntityRef<Attribute> _Attribute;
		
		private EntityRef<EntityInfo> _EntityInfo;
		
		private EntityRef<Remark> _Remark;
		
		private EntityRef<Remark> _Remark1;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnEntityIDChanging(System.Guid value);
    partial void OnEntityIDChanged();
    partial void OnAttributeIDChanging(System.Guid value);
    partial void OnAttributeIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnUomChanging(string value);
    partial void OnUomChanged();
    partial void OnField1Changing(string value);
    partial void OnField1Changed();
    partial void OnField2Changing(string value);
    partial void OnField2Changed();
    partial void OnField3Changing(string value);
    partial void OnField3Changed();
    partial void OnField4Changing(string value);
    partial void OnField4Changed();
    partial void OnField5Changing(string value);
    partial void OnField5Changed();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnCreatedRemarkChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedRemarkChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDeletedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnDeletedOnChanged();
    partial void OnDeletedByChanging(System.Nullable<System.Guid> value);
    partial void OnDeletedByChanged();
    partial void OnDeletedRemarkChanging(System.Nullable<System.Guid> value);
    partial void OnDeletedRemarkChanged();
    partial void OnBeforeEntityChanging(bool value);
    partial void OnBeforeEntityChanged();
    partial void OnPublishedChanging(bool value);
    partial void OnPublishedChanged();
    partial void OnBaseValueChanging(System.Nullable<decimal> value);
    partial void OnBaseValueChanged();
    #endregion
		
		public EntityData()
		{
			this._Attribute = default(EntityRef<Attribute>);
			this._EntityInfo = default(EntityRef<EntityInfo>);
			this._Remark = default(EntityRef<Remark>);
			this._Remark1 = default(EntityRef<Remark>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid EntityID
		{
			get
			{
				return this._EntityID;
			}
			set
			{
				if ((this._EntityID != value))
				{
					if (this._EntityInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityIDChanging(value);
					this.SendPropertyChanging();
					this._EntityID = value;
					this.SendPropertyChanged("EntityID");
					this.OnEntityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttributeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AttributeID
		{
			get
			{
				return this._AttributeID;
			}
			set
			{
				if ((this._AttributeID != value))
				{
					if (this._Attribute.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttributeIDChanging(value);
					this.SendPropertyChanging();
					this._AttributeID = value;
					this.SendPropertyChanged("AttributeID");
					this.OnAttributeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Uom", DbType="NVarChar(255)")]
		public string Uom
		{
			get
			{
				return this._Uom;
			}
			set
			{
				if ((this._Uom != value))
				{
					this.OnUomChanging(value);
					this.SendPropertyChanging();
					this._Uom = value;
					this.SendPropertyChanged("Uom");
					this.OnUomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Field1", DbType="VarChar(255)")]
		public string Field1
		{
			get
			{
				return this._Field1;
			}
			set
			{
				if ((this._Field1 != value))
				{
					this.OnField1Changing(value);
					this.SendPropertyChanging();
					this._Field1 = value;
					this.SendPropertyChanged("Field1");
					this.OnField1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Field2", DbType="VarChar(255)")]
		public string Field2
		{
			get
			{
				return this._Field2;
			}
			set
			{
				if ((this._Field2 != value))
				{
					this.OnField2Changing(value);
					this.SendPropertyChanging();
					this._Field2 = value;
					this.SendPropertyChanged("Field2");
					this.OnField2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Field3", DbType="VarChar(255)")]
		public string Field3
		{
			get
			{
				return this._Field3;
			}
			set
			{
				if ((this._Field3 != value))
				{
					this.OnField3Changing(value);
					this.SendPropertyChanging();
					this._Field3 = value;
					this.SendPropertyChanged("Field3");
					this.OnField3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Field4", DbType="VarChar(255)")]
		public string Field4
		{
			get
			{
				return this._Field4;
			}
			set
			{
				if ((this._Field4 != value))
				{
					this.OnField4Changing(value);
					this.SendPropertyChanging();
					this._Field4 = value;
					this.SendPropertyChanged("Field4");
					this.OnField4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Field5", DbType="VarChar(255)")]
		public string Field5
		{
			get
			{
				return this._Field5;
			}
			set
			{
				if ((this._Field5 != value))
				{
					this.OnField5Changing(value);
					this.SendPropertyChanging();
					this._Field5 = value;
					this.SendPropertyChanged("Field5");
					this.OnField5Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedRemark", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedRemark
		{
			get
			{
				return this._CreatedRemark;
			}
			set
			{
				if ((this._CreatedRemark != value))
				{
					if (this._Remark.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedRemarkChanging(value);
					this.SendPropertyChanging();
					this._CreatedRemark = value;
					this.SendPropertyChanged("CreatedRemark");
					this.OnCreatedRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> DeletedOn
		{
			get
			{
				return this._DeletedOn;
			}
			set
			{
				if ((this._DeletedOn != value))
				{
					this.OnDeletedOnChanging(value);
					this.SendPropertyChanging();
					this._DeletedOn = value;
					this.SendPropertyChanged("DeletedOn");
					this.OnDeletedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedBy", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DeletedBy
		{
			get
			{
				return this._DeletedBy;
			}
			set
			{
				if ((this._DeletedBy != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeletedByChanging(value);
					this.SendPropertyChanging();
					this._DeletedBy = value;
					this.SendPropertyChanged("DeletedBy");
					this.OnDeletedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeletedRemark", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DeletedRemark
		{
			get
			{
				return this._DeletedRemark;
			}
			set
			{
				if ((this._DeletedRemark != value))
				{
					if (this._Remark1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeletedRemarkChanging(value);
					this.SendPropertyChanging();
					this._DeletedRemark = value;
					this.SendPropertyChanged("DeletedRemark");
					this.OnDeletedRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeforeEntity", DbType="Bit NOT NULL")]
		public bool BeforeEntity
		{
			get
			{
				return this._BeforeEntity;
			}
			set
			{
				if ((this._BeforeEntity != value))
				{
					this.OnBeforeEntityChanging(value);
					this.SendPropertyChanging();
					this._BeforeEntity = value;
					this.SendPropertyChanged("BeforeEntity");
					this.OnBeforeEntityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Published", DbType="Bit NOT NULL")]
		public bool Published
		{
			get
			{
				return this._Published;
			}
			set
			{
				if ((this._Published != value))
				{
					this.OnPublishedChanging(value);
					this.SendPropertyChanging();
					this._Published = value;
					this.SendPropertyChanged("Published");
					this.OnPublishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseValue", DbType="Decimal(18,4)")]
		public System.Nullable<decimal> BaseValue
		{
			get
			{
				return this._BaseValue;
			}
			set
			{
				if ((this._BaseValue != value))
				{
					this.OnBaseValueChanging(value);
					this.SendPropertyChanging();
					this._BaseValue = value;
					this.SendPropertyChanged("BaseValue");
					this.OnBaseValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attribute_EntityData", Storage="_Attribute", ThisKey="AttributeID", OtherKey="ID", IsForeignKey=true)]
		public Attribute Attribute
		{
			get
			{
				return this._Attribute.Entity;
			}
			set
			{
				Attribute previousValue = this._Attribute.Entity;
				if (((previousValue != value) 
							|| (this._Attribute.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attribute.Entity = null;
						previousValue.EntityDatas.Remove(this);
					}
					this._Attribute.Entity = value;
					if ((value != null))
					{
						value.EntityDatas.Add(this);
						this._AttributeID = value.ID;
					}
					else
					{
						this._AttributeID = default(System.Guid);
					}
					this.SendPropertyChanged("Attribute");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EntityInfo_EntityData", Storage="_EntityInfo", ThisKey="EntityID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public EntityInfo EntityInfo
		{
			get
			{
				return this._EntityInfo.Entity;
			}
			set
			{
				EntityInfo previousValue = this._EntityInfo.Entity;
				if (((previousValue != value) 
							|| (this._EntityInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EntityInfo.Entity = null;
						previousValue.EntityDatas.Remove(this);
					}
					this._EntityInfo.Entity = value;
					if ((value != null))
					{
						value.EntityDatas.Add(this);
						this._EntityID = value.ID;
					}
					else
					{
						this._EntityID = default(System.Guid);
					}
					this.SendPropertyChanged("EntityInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Remark_EntityData", Storage="_Remark", ThisKey="CreatedRemark", OtherKey="ID", IsForeignKey=true)]
		public Remark Remark
		{
			get
			{
				return this._Remark.Entity;
			}
			set
			{
				Remark previousValue = this._Remark.Entity;
				if (((previousValue != value) 
							|| (this._Remark.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Remark.Entity = null;
						previousValue.EntityDatas.Remove(this);
					}
					this._Remark.Entity = value;
					if ((value != null))
					{
						value.EntityDatas.Add(this);
						this._CreatedRemark = value.ID;
					}
					else
					{
						this._CreatedRemark = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Remark");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Remark_EntityData1", Storage="_Remark1", ThisKey="DeletedRemark", OtherKey="ID", IsForeignKey=true)]
		public Remark Remark1
		{
			get
			{
				return this._Remark1.Entity;
			}
			set
			{
				Remark previousValue = this._Remark1.Entity;
				if (((previousValue != value) 
							|| (this._Remark1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Remark1.Entity = null;
						previousValue.EntityDatas1.Remove(this);
					}
					this._Remark1.Entity = value;
					if ((value != null))
					{
						value.EntityDatas1.Add(this);
						this._DeletedRemark = value.ID;
					}
					else
					{
						this._DeletedRemark = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Remark1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_EntityData", Storage="_User", ThisKey="CreatedBy", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.EntityDatas.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.EntityDatas.Add(this);
						this._CreatedBy = value.ID;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_EntityData1", Storage="_User1", ThisKey="DeletedBy", OtherKey="ID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.EntityDatas1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.EntityDatas1.Add(this);
						this._DeletedBy = value.ID;
					}
					else
					{
						this._DeletedBy = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
	public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _AryaCodeBaseVersion;
		
		private string _DatabaseName;
		
		private string _ProjectName;
		
		private string _ClientDescription;
		
		private string _SetName;
		
		private string _EntityField1Name;
		
		private bool _EntityField1Readonly;
		
		private string _EntityField2Name;
		
		private bool _EntityField2Readonly;
		
		private string _EntityField3Name;
		
		private bool _EntityField3Readonly;
		
		private string _EntityField4Name;
		
		private bool _EntityField4Readonly;
		
		private string _EntityField5Name;
		
		private bool _EntityField5Readonly;
		
		private bool _EntityField5IsStatus;
		
		private string _ImageUrlString;
		
		private string _ProductSearchString;
		
		private string _SchemaFillRateFilters;
		
		private System.DateTime _CreatedOn;
		
		private System.Guid _CreatedBy;
		
		private System.Xml.Linq.XElement _Preferences;
		
		private EntitySet<ProjectUom> _ProjectUoms;
		
		private EntitySet<TaxonomyInfo> _TaxonomyInfos;
		
		private EntitySet<UserProject> _UserProjects;
		
		private EntitySet<Sku> _Skus;
		
		private EntitySet<Attribute> _Attributes;
		
		private EntitySet<Group> _Groups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnAryaCodeBaseVersionChanging(string value);
    partial void OnAryaCodeBaseVersionChanged();
    partial void OnDatabaseNameChanging(string value);
    partial void OnDatabaseNameChanged();
    partial void OnProjectNameChanging(string value);
    partial void OnProjectNameChanged();
    partial void OnClientDescriptionChanging(string value);
    partial void OnClientDescriptionChanged();
    partial void OnSetNameChanging(string value);
    partial void OnSetNameChanged();
    partial void OnEntityField1NameChanging(string value);
    partial void OnEntityField1NameChanged();
    partial void OnEntityField1ReadonlyChanging(bool value);
    partial void OnEntityField1ReadonlyChanged();
    partial void OnEntityField2NameChanging(string value);
    partial void OnEntityField2NameChanged();
    partial void OnEntityField2ReadonlyChanging(bool value);
    partial void OnEntityField2ReadonlyChanged();
    partial void OnEntityField3NameChanging(string value);
    partial void OnEntityField3NameChanged();
    partial void OnEntityField3ReadonlyChanging(bool value);
    partial void OnEntityField3ReadonlyChanged();
    partial void OnEntityField4NameChanging(string value);
    partial void OnEntityField4NameChanged();
    partial void OnEntityField4ReadonlyChanging(bool value);
    partial void OnEntityField4ReadonlyChanged();
    partial void OnEntityField5NameChanging(string value);
    partial void OnEntityField5NameChanged();
    partial void OnEntityField5ReadonlyChanging(bool value);
    partial void OnEntityField5ReadonlyChanged();
    partial void OnEntityField5IsStatusChanging(bool value);
    partial void OnEntityField5IsStatusChanged();
    partial void OnImageUrlStringChanging(string value);
    partial void OnImageUrlStringChanged();
    partial void OnProductSearchStringChanging(string value);
    partial void OnProductSearchStringChanged();
    partial void OnSchemaFillRateFiltersChanging(string value);
    partial void OnSchemaFillRateFiltersChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    partial void OnPreferencesChanging(System.Xml.Linq.XElement value);
    partial void OnPreferencesChanged();
    #endregion
		
		public Project()
		{
			this._ProjectUoms = new EntitySet<ProjectUom>(new Action<ProjectUom>(this.attach_ProjectUoms), new Action<ProjectUom>(this.detach_ProjectUoms));
			this._TaxonomyInfos = new EntitySet<TaxonomyInfo>(new Action<TaxonomyInfo>(this.attach_TaxonomyInfos), new Action<TaxonomyInfo>(this.detach_TaxonomyInfos));
			this._UserProjects = new EntitySet<UserProject>(new Action<UserProject>(this.attach_UserProjects), new Action<UserProject>(this.detach_UserProjects));
			this._Skus = new EntitySet<Sku>(new Action<Sku>(this.attach_Skus), new Action<Sku>(this.detach_Skus));
			this._Attributes = new EntitySet<Attribute>(new Action<Attribute>(this.attach_Attributes), new Action<Attribute>(this.detach_Attributes));
			this._Groups = new EntitySet<Group>(new Action<Group>(this.attach_Groups), new Action<Group>(this.detach_Groups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AryaCodeBaseVersion", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AryaCodeBaseVersion
		{
			get
			{
				return this._AryaCodeBaseVersion;
			}
			set
			{
				if ((this._AryaCodeBaseVersion != value))
				{
					this.OnAryaCodeBaseVersionChanging(value);
					this.SendPropertyChanging();
					this._AryaCodeBaseVersion = value;
					this.SendPropertyChanged("AryaCodeBaseVersion");
					this.OnAryaCodeBaseVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatabaseName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DatabaseName
		{
			get
			{
				return this._DatabaseName;
			}
			set
			{
				if ((this._DatabaseName != value))
				{
					this.OnDatabaseNameChanging(value);
					this.SendPropertyChanging();
					this._DatabaseName = value;
					this.SendPropertyChanged("DatabaseName");
					this.OnDatabaseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string ProjectName
		{
			get
			{
				return this._ProjectName;
			}
			set
			{
				if ((this._ProjectName != value))
				{
					this.OnProjectNameChanging(value);
					this.SendPropertyChanging();
					this._ProjectName = value;
					this.SendPropertyChanged("ProjectName");
					this.OnProjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientDescription", DbType="NVarChar(4000) NOT NULL", CanBeNull=false)]
		public string ClientDescription
		{
			get
			{
				return this._ClientDescription;
			}
			set
			{
				if ((this._ClientDescription != value))
				{
					this.OnClientDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ClientDescription = value;
					this.SendPropertyChanged("ClientDescription");
					this.OnClientDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SetName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string SetName
		{
			get
			{
				return this._SetName;
			}
			set
			{
				if ((this._SetName != value))
				{
					this.OnSetNameChanging(value);
					this.SendPropertyChanging();
					this._SetName = value;
					this.SendPropertyChanged("SetName");
					this.OnSetNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityField1Name", DbType="VarChar(255)")]
		public string EntityField1Name
		{
			get
			{
				return this._EntityField1Name;
			}
			set
			{
				if ((this._EntityField1Name != value))
				{
					this.OnEntityField1NameChanging(value);
					this.SendPropertyChanging();
					this._EntityField1Name = value;
					this.SendPropertyChanged("EntityField1Name");
					this.OnEntityField1NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityField1Readonly", DbType="Bit NOT NULL")]
		public bool EntityField1Readonly
		{
			get
			{
				return this._EntityField1Readonly;
			}
			set
			{
				if ((this._EntityField1Readonly != value))
				{
					this.OnEntityField1ReadonlyChanging(value);
					this.SendPropertyChanging();
					this._EntityField1Readonly = value;
					this.SendPropertyChanged("EntityField1Readonly");
					this.OnEntityField1ReadonlyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityField2Name", DbType="VarChar(255)")]
		public string EntityField2Name
		{
			get
			{
				return this._EntityField2Name;
			}
			set
			{
				if ((this._EntityField2Name != value))
				{
					this.OnEntityField2NameChanging(value);
					this.SendPropertyChanging();
					this._EntityField2Name = value;
					this.SendPropertyChanged("EntityField2Name");
					this.OnEntityField2NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityField2Readonly", DbType="Bit NOT NULL")]
		public bool EntityField2Readonly
		{
			get
			{
				return this._EntityField2Readonly;
			}
			set
			{
				if ((this._EntityField2Readonly != value))
				{
					this.OnEntityField2ReadonlyChanging(value);
					this.SendPropertyChanging();
					this._EntityField2Readonly = value;
					this.SendPropertyChanged("EntityField2Readonly");
					this.OnEntityField2ReadonlyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityField3Name", DbType="VarChar(255)")]
		public string EntityField3Name
		{
			get
			{
				return this._EntityField3Name;
			}
			set
			{
				if ((this._EntityField3Name != value))
				{
					this.OnEntityField3NameChanging(value);
					this.SendPropertyChanging();
					this._EntityField3Name = value;
					this.SendPropertyChanged("EntityField3Name");
					this.OnEntityField3NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityField3Readonly", DbType="Bit NOT NULL")]
		public bool EntityField3Readonly
		{
			get
			{
				return this._EntityField3Readonly;
			}
			set
			{
				if ((this._EntityField3Readonly != value))
				{
					this.OnEntityField3ReadonlyChanging(value);
					this.SendPropertyChanging();
					this._EntityField3Readonly = value;
					this.SendPropertyChanged("EntityField3Readonly");
					this.OnEntityField3ReadonlyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityField4Name", DbType="VarChar(255)")]
		public string EntityField4Name
		{
			get
			{
				return this._EntityField4Name;
			}
			set
			{
				if ((this._EntityField4Name != value))
				{
					this.OnEntityField4NameChanging(value);
					this.SendPropertyChanging();
					this._EntityField4Name = value;
					this.SendPropertyChanged("EntityField4Name");
					this.OnEntityField4NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityField4Readonly", DbType="Bit NOT NULL")]
		public bool EntityField4Readonly
		{
			get
			{
				return this._EntityField4Readonly;
			}
			set
			{
				if ((this._EntityField4Readonly != value))
				{
					this.OnEntityField4ReadonlyChanging(value);
					this.SendPropertyChanging();
					this._EntityField4Readonly = value;
					this.SendPropertyChanged("EntityField4Readonly");
					this.OnEntityField4ReadonlyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityField5Name", DbType="VarChar(255)")]
		public string EntityField5Name
		{
			get
			{
				return this._EntityField5Name;
			}
			set
			{
				if ((this._EntityField5Name != value))
				{
					this.OnEntityField5NameChanging(value);
					this.SendPropertyChanging();
					this._EntityField5Name = value;
					this.SendPropertyChanged("EntityField5Name");
					this.OnEntityField5NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityField5Readonly", DbType="Bit NOT NULL")]
		public bool EntityField5Readonly
		{
			get
			{
				return this._EntityField5Readonly;
			}
			set
			{
				if ((this._EntityField5Readonly != value))
				{
					this.OnEntityField5ReadonlyChanging(value);
					this.SendPropertyChanging();
					this._EntityField5Readonly = value;
					this.SendPropertyChanged("EntityField5Readonly");
					this.OnEntityField5ReadonlyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityField5IsStatus", DbType="Bit NOT NULL")]
		public bool EntityField5IsStatus
		{
			get
			{
				return this._EntityField5IsStatus;
			}
			set
			{
				if ((this._EntityField5IsStatus != value))
				{
					this.OnEntityField5IsStatusChanging(value);
					this.SendPropertyChanging();
					this._EntityField5IsStatus = value;
					this.SendPropertyChanged("EntityField5IsStatus");
					this.OnEntityField5IsStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageUrlString", DbType="VarChar(4000)")]
		public string ImageUrlString
		{
			get
			{
				return this._ImageUrlString;
			}
			set
			{
				if ((this._ImageUrlString != value))
				{
					this.OnImageUrlStringChanging(value);
					this.SendPropertyChanging();
					this._ImageUrlString = value;
					this.SendPropertyChanged("ImageUrlString");
					this.OnImageUrlStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductSearchString", DbType="VarChar(4000)")]
		public string ProductSearchString
		{
			get
			{
				return this._ProductSearchString;
			}
			set
			{
				if ((this._ProductSearchString != value))
				{
					this.OnProductSearchStringChanging(value);
					this.SendPropertyChanging();
					this._ProductSearchString = value;
					this.SendPropertyChanged("ProductSearchString");
					this.OnProductSearchStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchemaFillRateFilters", DbType="VarChar(8000)")]
		public string SchemaFillRateFilters
		{
			get
			{
				return this._SchemaFillRateFilters;
			}
			set
			{
				if ((this._SchemaFillRateFilters != value))
				{
					this.OnSchemaFillRateFiltersChanging(value);
					this.SendPropertyChanging();
					this._SchemaFillRateFilters = value;
					this.SendPropertyChanged("SchemaFillRateFilters");
					this.OnSchemaFillRateFiltersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Preferences", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Preferences
		{
			get
			{
				return this._Preferences;
			}
			set
			{
				if ((this._Preferences != value))
				{
					this.OnPreferencesChanging(value);
					this.SendPropertyChanging();
					this._Preferences = value;
					this.SendPropertyChanged("Preferences");
					this.OnPreferencesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_ProjectUom", Storage="_ProjectUoms", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<ProjectUom> ProjectUoms
		{
			get
			{
				return this._ProjectUoms;
			}
			set
			{
				this._ProjectUoms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_TaxonomyInfo", Storage="_TaxonomyInfos", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<TaxonomyInfo> TaxonomyInfos
		{
			get
			{
				return this._TaxonomyInfos;
			}
			set
			{
				this._TaxonomyInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_UserProject", Storage="_UserProjects", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<UserProject> UserProjects
		{
			get
			{
				return this._UserProjects;
			}
			set
			{
				this._UserProjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Sku", Storage="_Skus", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<Sku> Skus
		{
			get
			{
				return this._Skus;
			}
			set
			{
				this._Skus.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Attribute", Storage="_Attributes", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<Attribute> Attributes
		{
			get
			{
				return this._Attributes;
			}
			set
			{
				this._Attributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Group", Storage="_Groups", ThisKey="ID", OtherKey="ProjectID")]
		public EntitySet<Group> Groups
		{
			get
			{
				return this._Groups;
			}
			set
			{
				this._Groups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectUoms(ProjectUom entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_ProjectUoms(ProjectUom entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_TaxonomyInfos(TaxonomyInfo entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_TaxonomyInfos(TaxonomyInfo entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_UserProjects(UserProject entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_UserProjects(UserProject entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_Skus(Sku entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Skus(Sku entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_Attributes(Attribute entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Attributes(Attribute entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
		
		private void attach_Groups(Group entity)
		{
			this.SendPropertyChanging();
			entity.Project = this;
		}
		
		private void detach_Groups(Group entity)
		{
			this.SendPropertyChanging();
			entity.Project = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Group]")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _ProjectID;
		
		private string _Name;
		
		private string _Description;
		
		private string _GroupType;
		
		private System.Xml.Linq.XElement _Criterion;
		
		private System.DateTime _CreatedOn;
		
		private System.Guid _CreatedBy;
		
		private EntitySet<Role> _Roles;
		
		private EntitySet<SkuGroup> _SkuGroups;
		
		private EntitySet<GroupNote> _GroupNotes;
		
		private EntitySet<UserProject> _UserProjects;
		
		private EntitySet<AttributeGroup> _AttributeGroups;
		
		private EntityRef<Project> _Project;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnProjectIDChanging(System.Nullable<System.Guid> value);
    partial void OnProjectIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnGroupTypeChanging(string value);
    partial void OnGroupTypeChanged();
    partial void OnCriterionChanging(System.Xml.Linq.XElement value);
    partial void OnCriterionChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnCreatedByChanging(System.Guid value);
    partial void OnCreatedByChanged();
    #endregion
		
		public Group()
		{
			this._Roles = new EntitySet<Role>(new Action<Role>(this.attach_Roles), new Action<Role>(this.detach_Roles));
			this._SkuGroups = new EntitySet<SkuGroup>(new Action<SkuGroup>(this.attach_SkuGroups), new Action<SkuGroup>(this.detach_SkuGroups));
			this._GroupNotes = new EntitySet<GroupNote>(new Action<GroupNote>(this.attach_GroupNotes), new Action<GroupNote>(this.detach_GroupNotes));
			this._UserProjects = new EntitySet<UserProject>(new Action<UserProject>(this.attach_UserProjects), new Action<UserProject>(this.detach_UserProjects));
			this._AttributeGroups = new EntitySet<AttributeGroup>(new Action<AttributeGroup>(this.attach_AttributeGroups), new Action<AttributeGroup>(this.detach_AttributeGroups));
			this._Project = default(EntityRef<Project>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProjectID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ProjectID
		{
			get
			{
				return this._ProjectID;
			}
			set
			{
				if ((this._ProjectID != value))
				{
					if (this._Project.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProjectIDChanging(value);
					this.SendPropertyChanging();
					this._ProjectID = value;
					this.SendPropertyChanged("ProjectID");
					this.OnProjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(1000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupType", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string GroupType
		{
			get
			{
				return this._GroupType;
			}
			set
			{
				if ((this._GroupType != value))
				{
					this.OnGroupTypeChanging(value);
					this.SendPropertyChanging();
					this._GroupType = value;
					this.SendPropertyChanged("GroupType");
					this.OnGroupTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Criterion", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Criterion
		{
			get
			{
				return this._Criterion;
			}
			set
			{
				if ((this._Criterion != value))
				{
					this.OnCriterionChanging(value);
					this.SendPropertyChanging();
					this._Criterion = value;
					this.SendPropertyChanged("Criterion");
					this.OnCriterionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_Role", Storage="_Roles", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<Role> Roles
		{
			get
			{
				return this._Roles;
			}
			set
			{
				this._Roles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_SkuGroup", Storage="_SkuGroups", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<SkuGroup> SkuGroups
		{
			get
			{
				return this._SkuGroups;
			}
			set
			{
				this._SkuGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_GroupNote", Storage="_GroupNotes", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<GroupNote> GroupNotes
		{
			get
			{
				return this._GroupNotes;
			}
			set
			{
				this._GroupNotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_UserProject", Storage="_UserProjects", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<UserProject> UserProjects
		{
			get
			{
				return this._UserProjects;
			}
			set
			{
				this._UserProjects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_AttributeGroup", Storage="_AttributeGroups", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<AttributeGroup> AttributeGroups
		{
			get
			{
				return this._AttributeGroups;
			}
			set
			{
				this._AttributeGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Project_Group", Storage="_Project", ThisKey="ProjectID", OtherKey="ID", IsForeignKey=true)]
		public Project Project
		{
			get
			{
				return this._Project.Entity;
			}
			set
			{
				Project previousValue = this._Project.Entity;
				if (((previousValue != value) 
							|| (this._Project.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Project.Entity = null;
						previousValue.Groups.Remove(this);
					}
					this._Project.Entity = value;
					if ((value != null))
					{
						value.Groups.Add(this);
						this._ProjectID = value.ID;
					}
					else
					{
						this._ProjectID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Project");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Group", Storage="_User", ThisKey="CreatedBy", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Groups.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Groups.Add(this);
						this._CreatedBy = value.ID;
					}
					else
					{
						this._CreatedBy = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Roles(Role entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_Roles(Role entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_SkuGroups(SkuGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_SkuGroups(SkuGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_GroupNotes(GroupNote entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_GroupNotes(GroupNote entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_UserProjects(UserProject entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_UserProjects(UserProject entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_AttributeGroups(AttributeGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_AttributeGroups(AttributeGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UnitOfMeasure")]
	public partial class UnitOfMeasure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _UnitName;
		
		private string _UnitAbbreviation;
		
		private System.Nullable<System.Guid> _BaseUnit;
		
		private string _FromBaseExpression;
		
		private string _ToBaseExpression;
		
		private System.Nullable<int> _Precision;
		
		private EntitySet<ProjectUom> _ProjectUoms;
		
		private EntitySet<UnitOfMeasure> _UnitOfMeasures;
		
		private EntityRef<UnitOfMeasure> _UnitOfMeasure1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnUnitNameChanging(string value);
    partial void OnUnitNameChanged();
    partial void OnUnitAbbreviationChanging(string value);
    partial void OnUnitAbbreviationChanged();
    partial void OnBaseUnitChanging(System.Nullable<System.Guid> value);
    partial void OnBaseUnitChanged();
    partial void OnFromBaseExpressionChanging(string value);
    partial void OnFromBaseExpressionChanged();
    partial void OnToBaseExpressionChanging(string value);
    partial void OnToBaseExpressionChanged();
    partial void OnPrecisionChanging(System.Nullable<int> value);
    partial void OnPrecisionChanged();
    #endregion
		
		public UnitOfMeasure()
		{
			this._ProjectUoms = new EntitySet<ProjectUom>(new Action<ProjectUom>(this.attach_ProjectUoms), new Action<ProjectUom>(this.detach_ProjectUoms));
			this._UnitOfMeasures = new EntitySet<UnitOfMeasure>(new Action<UnitOfMeasure>(this.attach_UnitOfMeasures), new Action<UnitOfMeasure>(this.detach_UnitOfMeasures));
			this._UnitOfMeasure1 = default(EntityRef<UnitOfMeasure>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitName", DbType="NVarChar(255)")]
		public string UnitName
		{
			get
			{
				return this._UnitName;
			}
			set
			{
				if ((this._UnitName != value))
				{
					this.OnUnitNameChanging(value);
					this.SendPropertyChanging();
					this._UnitName = value;
					this.SendPropertyChanged("UnitName");
					this.OnUnitNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitAbbreviation", DbType="NVarChar(255)")]
		public string UnitAbbreviation
		{
			get
			{
				return this._UnitAbbreviation;
			}
			set
			{
				if ((this._UnitAbbreviation != value))
				{
					this.OnUnitAbbreviationChanging(value);
					this.SendPropertyChanging();
					this._UnitAbbreviation = value;
					this.SendPropertyChanged("UnitAbbreviation");
					this.OnUnitAbbreviationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseUnit", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> BaseUnit
		{
			get
			{
				return this._BaseUnit;
			}
			set
			{
				if ((this._BaseUnit != value))
				{
					if (this._UnitOfMeasure1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBaseUnitChanging(value);
					this.SendPropertyChanging();
					this._BaseUnit = value;
					this.SendPropertyChanged("BaseUnit");
					this.OnBaseUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromBaseExpression", DbType="VarChar(4000)")]
		public string FromBaseExpression
		{
			get
			{
				return this._FromBaseExpression;
			}
			set
			{
				if ((this._FromBaseExpression != value))
				{
					this.OnFromBaseExpressionChanging(value);
					this.SendPropertyChanging();
					this._FromBaseExpression = value;
					this.SendPropertyChanged("FromBaseExpression");
					this.OnFromBaseExpressionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToBaseExpression", DbType="VarChar(4000)")]
		public string ToBaseExpression
		{
			get
			{
				return this._ToBaseExpression;
			}
			set
			{
				if ((this._ToBaseExpression != value))
				{
					this.OnToBaseExpressionChanging(value);
					this.SendPropertyChanging();
					this._ToBaseExpression = value;
					this.SendPropertyChanged("ToBaseExpression");
					this.OnToBaseExpressionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Precision", DbType="Int")]
		public System.Nullable<int> Precision
		{
			get
			{
				return this._Precision;
			}
			set
			{
				if ((this._Precision != value))
				{
					this.OnPrecisionChanging(value);
					this.SendPropertyChanging();
					this._Precision = value;
					this.SendPropertyChanged("Precision");
					this.OnPrecisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitOfMeasure_ProjectUom", Storage="_ProjectUoms", ThisKey="ID", OtherKey="UomID")]
		public EntitySet<ProjectUom> ProjectUoms
		{
			get
			{
				return this._ProjectUoms;
			}
			set
			{
				this._ProjectUoms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitOfMeasure_UnitOfMeasure", Storage="_UnitOfMeasures", ThisKey="ID", OtherKey="BaseUnit")]
		public EntitySet<UnitOfMeasure> UnitOfMeasures
		{
			get
			{
				return this._UnitOfMeasures;
			}
			set
			{
				this._UnitOfMeasures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitOfMeasure_UnitOfMeasure", Storage="_UnitOfMeasure1", ThisKey="BaseUnit", OtherKey="ID", IsForeignKey=true)]
		public UnitOfMeasure UnitOfMeasure1
		{
			get
			{
				return this._UnitOfMeasure1.Entity;
			}
			set
			{
				UnitOfMeasure previousValue = this._UnitOfMeasure1.Entity;
				if (((previousValue != value) 
							|| (this._UnitOfMeasure1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitOfMeasure1.Entity = null;
						previousValue.UnitOfMeasures.Remove(this);
					}
					this._UnitOfMeasure1.Entity = value;
					if ((value != null))
					{
						value.UnitOfMeasures.Add(this);
						this._BaseUnit = value.ID;
					}
					else
					{
						this._BaseUnit = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("UnitOfMeasure1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProjectUoms(ProjectUom entity)
		{
			this.SendPropertyChanging();
			entity.UnitOfMeasure = this;
		}
		
		private void detach_ProjectUoms(ProjectUom entity)
		{
			this.SendPropertyChanging();
			entity.UnitOfMeasure = null;
		}
		
		private void attach_UnitOfMeasures(UnitOfMeasure entity)
		{
			this.SendPropertyChanging();
			entity.UnitOfMeasure1 = this;
		}
		
		private void detach_UnitOfMeasures(UnitOfMeasure entity)
		{
			this.SendPropertyChanging();
			entity.UnitOfMeasure1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IgnoreWords")]
	public partial class IgnoreWord
	{
		
		private System.Guid _ID;
		
		private System.Guid _EntityID;
		
		private string _EntityType;
		
		private System.Nullable<bool> _IgnoreAll;
		
		private string _Value;
		
		public IgnoreWord()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid EntityID
		{
			get
			{
				return this._EntityID;
			}
			set
			{
				if ((this._EntityID != value))
				{
					this._EntityID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EntityType", DbType="VarChar(4000) NOT NULL", CanBeNull=false)]
		public string EntityType
		{
			get
			{
				return this._EntityType;
			}
			set
			{
				if ((this._EntityType != value))
				{
					this._EntityType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IgnoreAll", DbType="Bit")]
		public System.Nullable<bool> IgnoreAll
		{
			get
			{
				return this._IgnoreAll;
			}
			set
			{
				if ((this._IgnoreAll != value))
				{
					this._IgnoreAll = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(4000) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
